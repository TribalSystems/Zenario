This is the developer build of TinyMCE.

The zenario_save plugin has been added.

The stylebuttons plugin was added (from http://blog.ionelmc.ro/2013/10/17/tinymce-formatting-toolbar-buttons/)

themes/inlite/theme.js and themes/modern/theme.js
  z-index changes:
	Replace:
		var i, zIndex = FloatPanel.zIndex || 0xFFFF, topModal;
	With:
		var i, zIndex = (FloatPanel.zIndex || 0xFFFF) + (zenarioAB.isOpen? 300000 : 0), topModal;
	
	Replace:
			style.zIndex = 0xFFFF + 0xFFFF;
	With:
			style.zIndex = 0xFFFF + 0xFFFF + (zenarioAB.isOpen? 300000 : 0);

  Add an option for enabling/disabling autocompletes (e.g. the anchor links) and disable them by default
	Replace:
        var linkTargets = LinkTargets.find(bodyElm);
        var menuItems = createMenuItems(term, linkTargets, fileType, editorSettings);
	With:
        var linkTargets = editorSettings.enable_autocompletes? LinkTargets.find(bodyElm) : [];
        var menuItems = editorSettings.enable_autocompletes? createMenuItems(term, linkTargets, fileType, editorSettings) : [];




tinymce.js
  z-index changes:
	Replace:
				'z-index: 10000' +
	With:
				'z-index: ' + (zenarioAB.isOpen? 310000 : 10000) +

 Implement the option to allow events:
  Replace:
    var compileSchema = function (type) {
  With:
	var compileSchema = function (type, settings) {
  
  Uncomment the definition (and add a "var" to fix the strict error):
		var eventAttributes =

  Replace:
      // Add HTML5 items to globalAttributes, blockContent, phrasingContent
  With:
      if (settings.allow_events) {
      	globalAttributes = globalAttributes.concat(globalAttributes, eventAttributes);
      }
      
      // Add HTML5 items to globalAttributes, blockContent, phrasingContent

  Replace:
		schemaItems = compileSchema(settings.schema);
  With:
		schemaItems = compileSchema(settings.schema, settings);



themes/modern/theme.js:
  Remove any reference to Branding (case sensitive)
  Near the modes.Inline definition, add the modes.ZenarioInlineUI definition
  
  Add the ZenarioInlineUI variable to the modern.Theme definition:
   Replace:
    'tinymce.themes.modern.modes.Inline',
   With:
    'tinymce.themes.modern.modes.Inline',
    'tinymce.themes.modern.modes.ZenarioInlineUI',
   Replace:
  function (Settings, Iframe, Inline, ProgressState) {
   With:
  function (Settings, Iframe, Inline, ZenarioInlineUI, ProgressState) {

  Replace:
      return Settings.isInline(editor) ? Inline.render(editor, theme, args) : Iframe.render(editor, theme, args);
  With:
      if (editor.settings.zenario_inline_ui) {
        return ZenarioInlineUI.render(editor, theme, args);
      }

      return Settings.isInline(editor) ? Inline.render(editor, theme, args) : Iframe.render(editor, theme, args);

plugins/image/plugin.js
#  Hack to fix a bug where the scroll changes when editing an existing image
#	Replace:
#            waitLoad(imgElm);
#          });
#	With:
#            waitLoad(imgElm);
#          });
#          
#          //Hack to fix a bug where the scroll changes when editing an existing image
#          var scrollTop = zenario.scrollTop();
#          setTimeout(function() {
#          	zenario.scrollTop(scrollTop);
#          }, 0);

  Added a CSS class name to a field so it could be reliably targeted using a jQuery selector,
  and also change the label::
	Replace:
        generalFormItems.push({ name: 'alt', type: 'textbox', label: 'Image description' });
	With:
		generalFormItems.push({name: 'alt', type: 'textbox', label: 'Image alt tag', classes: 'image_alt'});

  Hacked the old (deprecated) alignment options back in:
	Replace:
          data = {
            src: data.src,
            alt: data.alt,
	With:
          if (data.align === '') {
          	data.align = null;
          }
          
          data = {
            src: data.src,
            alt: data.alt,
            align: data.align,
	
	Replace:
            src: dom.getAttrib(imgElm, 'src'),
            alt: dom.getAttrib(imgElm, 'alt'),
	With:
            src: dom.getAttrib(imgElm, 'src'),
            alt: dom.getAttrib(imgElm, 'alt'),
            align: dom.getAttrib(imgElm, 'align'),
	
	Replace:
      if (Settings.hasImageCaption(editor)) {
        generalFormItems.push({ name: 'caption', type: 'checkbox', label: 'Caption' });
      }
	With:
      generalFormItems.push({
		type: 'listbox',
		name: 'align',
		label: 'Alignment',
		values: [
			{text: '-- Not Set --', value: ''},
			{text: 'Left', value: 'left'},
			{text: 'Right', value: 'right'},
			{text: 'Middle', value: 'middle'},
			{text: 'Top', value: 'top'},
			{text: 'Bottom', value: 'bottom'}
		]
      });

      if (Settings.hasImageCaption(editor)) {
        generalFormItems.push({ name: 'caption', type: 'checkbox', label: 'Caption' });
      }

  Hack in an option to set the CSS class of an image,
  and add the option to hide the CSS and fields:
	Replace:
      if (Settings.getClassList(editor)) {
	With:
      if (editor.settings.image_class === false) {
      } else if (!editor.settings.image_class_list) {
        generalFormItems.push({
			name: 'class',
			type: 'textbox',
			size: 40,
			label: 'CSS class name(s)'
		});
      } else
      if (Settings.getClassList(editor)) {


	Replace:
      generalFormItems.push({
		type: 'listbox',
		name: 'align',
		label: 'Alignment',
	With:
     if (editor.settings.image_alignment !== false)
      generalFormItems.push({
		type: 'listbox',
		name: 'align',
		label: 'Alignment',

plugins/link/plugin.js
  Added some CSS class names to fields so we can target them:
	Replace:
          label: 'Text to display',
	With:
          label: 'Text to display',
          classes: 'link_text_to_display',
	Replace:
            label: 'Url',
	With:
            label: 'Url',
            classes: 'zenario_link_picker',

  Hack in an option to set the CSS class of a link, and add the option to hide it:
	Replace:
      if (Settings.hasLinkClassList(editor.settings)) {
	With:
      if (editor.settings.link_class === false) {
      } else if (!Settings.hasLinkClassList(editor.settings)) {
        classListCtrl = {
          name: 'class',
          type: 'textbox',
          size: 40,
          label: 'CSS class name(s)'
        };
      } else {

  Hack in an option to change the link pickers for images:
	Replace:
          insertLink(resultData);
        }
      });

	With:
          insertLink(resultData);
        }
      });
      zenarioA.setLinkPickerOnTinyMCE();

plugins/table/plugin.js
  Hack in an option to set the CSS class of a table:
	Replace:
      if (editor.settings.table_class_list) {
	With:
      if (!editor.settings.table_class_list) {
        classListCtrl = {
          name: 'class',
          type: 'textbox',
          size: 40,
          label: 'CSS class name(s)'
        };
      } else {



Bug fixes:
plugins/code/plugin.js
  A hack to try and remove some of the bad/repeated html that TinyMCE sometimes generates,
  e.g. duplicate id/style tags
	Replace:
      return editor.getContent({ source_view: true });
	With:
      return zenario.tinyMCEGetContent(editor);

plugins/wordcount/plugin.js
	Fix a coding error where a reserved word was used
		Replace "char" with another name, e.g. "ch4r"
