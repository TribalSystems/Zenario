This is the developer build of TinyMCE.
However the dev and non-jQuery versions of the code (the classes directory, tinymce.js, tinymce.min.js,
tinymce.dev.js and tinymce.jquery.dev.js) have been deleted for a smaller download.

The zenario_save plugin has been added.

The stylebuttons plugin was added (from http://blog.ionelmc.ro/2013/10/17/tinymce-formatting-toolbar-buttons/)

tinymce.jquery.js
  z-index changes:
	Replace:
		var i, zIndex = FloatPanel.zIndex || 0xFFFF, topModal;
	With:
		var i, zIndex = (FloatPanel.zIndex || 0xFFFF) + (zenarioAB.isOpen? 300000 : 0), topModal;

	Replace:
			style.zIndex = 0xFFFF + 0xFFFF;
	With:
			style.zIndex = 0xFFFF + 0xFFFF + (zenarioAB.isOpen? 300000 : 0);

	Replace:
				'z-index: 10000' +
	With:
				'z-index: ' + (zenarioAB.isOpen? 310000 : 10000) +

 Implement the option to allow events:
  Replace:
	function compileSchema(type) {
  With:
	function compileSchema(type, settings) {
  
  Uncomment the definition:
		eventAttributes =

  Replace:
		// Add HTML5 items to globalAttributes, blockContent, phrasingContent
  With:
		if (settings.allow_events) {
			globalAttributes = globalAttributes.concat(globalAttributes, eventAttributes);
		}
		
 		// Add HTML5 items to globalAttributes, blockContent, phrasingContent

  Replace:
		schemaItems = compileSchema(settings.schema);
  With:
		schemaItems = compileSchema(settings.schema, settings);



themes/modern/theme.js:
  Near the renderInlineUI function definition, add a new function definition:
	/**
	 * Renders the inline editor UI, and adds the toolbar inside the Admin Toolbar.
	 * (This is a partial copy of the renderIframeUI() function.)
	 */
	function renderZenarioUI(args) {
		var panel,
			containerId = zenario.getContainerIdFromEl(args.targetNode),
			adminToolbar = document.getElementById('zenario_at_toolbars');

		if (args.skinUiCss) {
			tinymce.DOM.loadCSS(args.skinUiCss);
		}

		// Basic UI layout
		panel = self.panel = Factory.create({
			type: 'panel',
			role: 'application',
			classes: 'tinymce',
			style: 'visibility: hidden',
			layout: 'stack',
			border: 1,
			items: [
				settings.menubar === false ? null : {type: 'menubar', border: '0 0 1 0', items: createMenuButtons()},
				{type: 'panel', layout: 'stack', classes: "toolbar-grp", ariaRoot: true, ariaRemember: true, items: createToolbars()},
				{type: 'panel', name: 'iframe', layout: 'stack', classes: 'edit-area', html: '', border: '1 0 0 0'}
			]
		});

		adminToolbar.innerHTML = '';
		
		// Render before the target textarea/div
		editor.fire('BeforeRenderUI');
		panel.renderTo(adminToolbar).reflow();
		addAccessibilityKeys(panel);

		settings.content_editable = true;
		
		return {};
	}

  Replace:
		if (settings.inline) {
			return renderInlineUI(args);
		}
  With:
		// Render inline UI, and add the toolbar inside the Admin Toolbar.
		if (settings.zenario_inline_ui) {
			return renderZenarioUI(args);
		}

		// Render inline UI
		if (settings.inline) {
			return renderInlineUI(args);
		}

plugins/image/plugin.js
#  Tweak some text:
#	Replace:
#		text: 'Insert image',
#	With:
#		text: 'Insert/edit image',

  Added a CSS class name to a field so it could be reliably targeted using a jQuery selector,
  and also change the label::
	Replace:
			generalFormItems.push({name: 'alt', type: 'textbox', label: 'Image description'});
	With:
			generalFormItems.push({name: 'alt', type: 'textbox', label: 'Image alt tag', classes: 'image_alt'});

  Hacked the old (deprecated) alignment options back in:
	Replace:
			data = {
				src: data.src,
				alt: data.alt,
				title: data.title,
				width: data.width,
				height: data.height,
				style: data.style,
				"class": data["class"]
			};
	With:
			if (data.align === '') {
				data.align = null;
			}

			data = {
				src: data.src,
				alt: data.alt,
				title: data.title,
				width: data.width,
				height: data.height,
				style: data.style,
				"class": data["class"],
				align: data.align
			};
	
	Replace:
				src: dom.getAttrib(imgElm, 'src'),
				alt: dom.getAttrib(imgElm, 'alt'),
	With:
				src: dom.getAttrib(imgElm, 'src'),
				alt: dom.getAttrib(imgElm, 'alt'),
				align: dom.getAttrib(imgElm, 'align'),
	
	Replace:
		generalFormItems.push(classListCtrl);
	With:
		generalFormItems.push(classListCtrl);
		generalFormItems.push({
				type: 'listbox',
				name: 'align',
				label: 'Alignment',
				values: [
					{text: '-- Not Set --', value: ''},
					{text: 'Left', value: 'left'},
					{text: 'Right', value: 'right'},
					{text: 'Middle', value: 'middle'},
					{text: 'Top', value: 'top'},
					{text: 'Bottom', value: 'bottom'}
				]
			});

  Hack in an option to set the CSS class of an image:
	Replace:
		if (editor.settings.image_class_list) {
	With:
		if (!editor.settings.image_class_list) {
			classListCtrl = {
				name: 'class',
				type: 'textbox',
				size: 40,
				label: 'CSS class name(s)'
			};
		} else {


plugins/image/plugin.js
  Added the option to hide the CSS and  fields
	Replace:
		if (!editor.settings.image_class_list) {
	With:
		if (editor.settings.image_class === false) {
		} else if (!editor.settings.image_class_list) {
	
	Replace:
		generalFormItems.push({
				type: 'listbox',
				name: 'align',
				label: 'Alignment',
	With:
		if (editor.settings.image_alignment !== false)
			generalFormItems.push({
				type: 'listbox',
				name: 'align',
				label: 'Alignment',

plugins/link/plugin.js
  Added the option to hide the CSS field
	Replace:
		if (!editor.settings.link_class_list) {
	With:
		if (editor.settings.link_class === false) {
		} else if (!editor.settings.link_class_list) {

  Added some CSS class names to fields so we can target them:
	Replace:
				label: 'Text to display',
	With:
				label: 'Text to display',
				classes: 'link_text_to_display',
	Replace:
					label: 'Url',
	With:
					label: 'Url',
					classes: 'zenario_link_picker',

  Hack in an option to set the CSS class of a link:
	Replace:
		if (editor.settings.link_class_list) {
	With:
		if (!editor.settings.link_class_list) {
			classListCtrl = {
				name: 'class',
				type: 'textbox',
				size: 40,
				label: 'CSS class name(s)'
			};
		} else {
  
  Hack in an option to change the link pickers for images:
	Replace:
				insertLink();
			}
		});

	With:
				insertLink();
			}
		});
		zenarioA.setLinkPickerOnTinyMCE();

plugins/table/plugin.js
  Hack in an option to set the CSS class of a table:
	Replace:
			if (editor.settings.table_class_list) {
	With:
			if (!editor.settings.table_class_list) {
				classListCtrl = {
					name: 'class',
					type: 'textbox',
					size: 40,
					label: 'CSS class name(s)'
				};
			} else {



Bug fixes:
plugins/code/plugin.js
	A hack to try and remove some of the bad/repeated html that TinyMCE sometimes generates,
	e.g. duplicate id/style tags
	  Replace:
		win.find('#code').value(editor.getContent({source_view: true}));
	  With:
		win.find('#code').value(zenario.tinyMCEGetContent(editor));



#	tinymce.jquery.js
#		Replace:
#			if (bindings) {
#				if (name) {
#		With:
#			if (bindings) {
#				if (name && !{object:1, 'function':1}[typeof name]) {