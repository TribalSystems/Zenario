---
addFromString:
  summary: |
    This function lets you add a file to the database by passing the file's contents in as a string.
  desc: |
    <h2>Description</h2>
    <p>This function lets you add a file to the database by passing the file's contents in as a string.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$usage</code></h3>
    <p style="margin-left: 40px;">Where the image will be used, e.g. <span class="code">email</span> or <span class="code">inline</span>.</p>
    <p style="margin-left: 40px;">See <a href="ref-core-addfiletodatabase.html"><span class="code">addFileToDatabase()</span></a> for a full description.</p>
    <h3><code>$contents</code></h3>
    <p style="margin-left: 40px;">A string containing the contents of the file.</p>
    <h3><code>$filename</code></h3>
    <p style="margin-left: 40px;">A name for the file.</p>
    <h3><code>$mustBeAnImage</code></h3>
    <p style="margin-left: 40px;">Set this to true if the file must be an image. The CMS will then reject any non-images and this function will return false.</p>
    <h3><code>$addToDocstoreDirIfPossible</code></h3>
    <p style="margin-left: 40px;">Should the CMS attempt to add this file to the docstore directory rather than the database?</p>
    <h2>Return Value</h2>
    <p>This function returns the new file id, or false if it failed.</p>
addToDatabase:
  summary: |
    You can add a new file into the files table of the CMS using this function.
  desc: |
    <h2>Summary</h2>
    <p>You can add a new file into the files table of the CMS using this function.</p>
    <h2>Description</h2>
    <p>You can use this function to insert new records to the files table in the CMS.</p>
    <p>Note that the files table has a key on usage and checksum. If you attempt&nbsp;to add a file that is identical to an existing file in the&nbsp;table, the file will not be added and this function will return the id of the existing file.</p>
    <p>If two identical files with different names are uploaded,&nbsp;only one will be stored and only one name will be kept. If the filename is important to you then you should store it separately.</p>
    <h2>Parameters</h2>
    <h3><code>$usage</code></h3>
    <p style="margin-left: 40px;">This is where the image will be used; images are stored separately depending on the usage you chose.</p>
    <p style="margin-left: 40px;">The core usages are as follows:</p>
    <h4 style="margin-left: 40px;">content</h4>
    <p style="margin-left: 40px;">This file is associated with a Content Item on a one-to-one basis; e.g. a Document Download or a Streaming Video.</p>
    <h4 style="margin-left: 40px;">favicon</h4>
    <p style="margin-left: 40px;">This file is the favicon to be used for this site. (Note that there can only be one favicon in the system.)</p>
    <h4 style="margin-left: 40px;">group</h4>
    <p style="margin-left: 40px;">This file is an image to use for a Group.</p>
    <h4 style="margin-left: 40px;">inline</h4>
    <p style="margin-left: 40px;">This file is an inline image or animation.</p>
    <h4 style="margin-left: 40px;">mobile_icon</h4>
    <p style="margin-left: 40px;">This file is the mobile to be used for this site.&nbsp;(Note that there can only be one favicon in the system.)</p>
    <h4 style="margin-left: 40px;">template</h4>
    <p style="margin-left: 40px;">This file is an image to use for a Template.</p>
    <h4 style="margin-left: 40px;">user</h4>
    <p style="margin-left: 40px;">This file is an image to use for an Extranet User.</p>
    <p style="margin-left: 40px;">If your Module uses files, you may also add your own types of usage. If you do so, we suggest you prefix the name you use with your name, your company's name or your project's name to avoid any clashes.</p>
    <h3><code>$location</code></h3>
    <p style="margin-left: 40px;">The path to the file's current location. (E.g. this will probably be in the temporary directory if you are dealing with an uploaded file). If you're saving a file from the $_FILES variable in PHP, then this is $_FILES['input_name_here']['tmp_name'].</p>
    <h3><code>$filename</code></h3>
    <p style="margin-left: 40px;">The name you wish the file to have, if different from its current name.</p>
    <h3><code>$mustBeAnImage</code></h3>
    <p style="margin-left: 40px;">Set this to true if you want the uploaded file to be an image. The CMS will then reject any non-images and this function will return false.&nbsp;</p>
    <h3><code>$deleteWhenDone</code></h3>
    <p style="margin-left: 40px;">Should the CMS attempt to delete the source file from the file system when done?</p>
    <h3><code>$addToDocstoreDirIfPossible</code></h3>
    <p style="margin-left: 40px;">Should the CMS attempt to add this file to the docstore directory rather than the database?</p>
    <p style="margin-left: 40px;">In general, you should set this to <span class="code">true</span> for uses that are usually large in size, such as raw pictures and videos, and <span class="code">false</span> for uses that are usually small in size, such as inline images.</p>
    <p style="margin-left: 40px;">Note that if the docstore directory is not set up on a site, this function will then attempt to add a file to the database as a fallback.</p>
    <h2>Return Value</h2>
    <p>Returns the id of the file in the files table, or <span class="code">false</span> if the file could not be added.</p>
addToDocstoreDir:
  summary: |
    A shortcut to the addFileToDatabase() core function, which always tries to add a file to the docstore directory if possible.
  desc: |
    <h2>Description</h2>
    <p>A shortcut to the&nbsp;<a href="ref-core-addfiletodatabase.html">addFileToDatabase() core function</a>, which always tries to add a file to the docstore directory if possible.</p>
addImageDataURIsToDatabase:
  summary: |
    This allows you to take some HTML content, strip any data URIs out, add them to the CMS as files in the database, then replace them in the HTML with normal links to those files.
  desc: |
    <h2>Summary</h2>
    <p>This allows you to take some HTML content, strip any data URIs out, add them to the CMS as files in the database, then replace them in the HTML with normal links to those files.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Description</h2>
    <p>When an Admin is working on an inline editor and drags an image into the editor, some browsers (such as Firefox) can sometimes store the image inline using the data URI scheme.</p>
    <p>This can be undesirable as these images are stored directly in the content, are not manageable in Organizer, and will not be displayed in old browsers.</p>
    <p>The <span class="code">addImageDataURIsToDatabase()</span> function allows you to take some HTML content, strip any data URIs out, add them to the CMS as files in the database, then replace them in the HTML with normal links to those files.</p>
    <p>Not every format of data URI is supported, but the commonly used base64-version (as used by Firefox) is supported.</p>
    <h2>Parameters</h2>
    <h3><code>&amp;$content</code></h3>
    <p style="margin-left: 40px;">HTML content to search for images using data URIs.</p>
    <h3><code>$prefix</code></h3>
    <p style="margin-left: 40px;">A prefix to add to the URL of the replaced images.</p>
    <p style="margin-left: 40px;">By default no prefix is added (i.e. a relative URL is used).</p>
    <h3><code>$usage</code></h3>
    <p style="margin-left: 40px;">(From version 6.0.5 onwards.)</p>
    <p style="margin-left: 40px;">Where the image will be used, e.g. <span class="code">email</span> or <span class="code">inline</span>.</p>
    <p style="margin-left: 40px;">See <a href="ref-core-addfiletodatabase.html"><span class="code">addFileToDatabase()</span></a> for a full description.</p>
    <h2>Return Value</h2>
    <p>No return value.</p>
    <h2>Example</h2>
    <pre>$html =<br />    '&lt;p&gt;&lt;img src="zenario/file.php?c=elQS3&amp;filename=image_2214.gif'.<br />    'x5LiAgzasPP5DlkrMLO3wgoTB8+YyFDawtBnCtQkNPb6LTC2YacwGiFt6S42PH0+BpMnw0+keLn8Zaqz'.<br />    'Q05hUlwsAc4fApDoP///yH5BAAAAAAALAAAAAATABMAAAW64FJ0ZGmexXJsXuu+8HZ0cF2Tdt52g2twi'.<br />    'teP8+I9HoSP5ZPwPCjKT8T5GAwehg/hofhQLp8AV3scIDBQzANToXA+F3VCskacAwmMXh+w7PF6dhiAG'.<br />    'gkJFAERf3kYCAIbAQsbiBkBUBuYeJgCjxQWmBsRE2+gEhWbjxBeAAUfEwdaGxAWFKgbABpSUhMAUBFSA'.<br />    'B0bnLesBQUQEACsHAXLy5zP0tII09HT2NYOAtndAg4SDQzj5OXmDRIhADs=" alt="Go!" /&gt;&lt;/p&gt;';<br /><br />addImageDataURIsToDatabase($html);</pre>
    <p>Would result in the following being placed in <span class="code">$html</span>:</p>
    <pre>&lt;p&gt;&lt;img<br /> src="c=be97985e90d9a7245b5dd579cc6df2f3&amp;amp;filename=image_123.gif"<br /> alt="Go!" /&gt;&lt;/p&gt;</pre>
isAllowed:
  summary: |
    Checks to see if a file type is recognised by the CMS. 
  desc: |
    <h2>Description</h2>
    <p>Checks to see if a file type is recognised by the CMS.&nbsp;</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <p>This function existed in 6.0.2, under the name&nbsp;<span class="code">documentTypeIsAllowed()</span>.</p>
    <h2>Parameters</h2>
    <h3><code>$file</code></h3>
    <p style="margin-left: 40px;">A file extension.</p>
    <p style="margin-left: 40px;">You may also pass in the full filename or filepath.</p>
    <h2>Return Value</h2>
    <p>This function will return true for the vast majority of common file types, but will return false for obscure file types, unknown file types or executable files.</p>
contentLink:
  summary: |
    This function generates a link to download a file associated with a Content Item.
  desc: |
    <h2>Summary</h2>
    <p>This function generates a link to download a file associated with a Content Item.</p>
    <h2>Description</h2>
    <p>This function generates a link to download a file associated with a Content Item; for example a Document or a Picture.</p>
    <p>Note that by calling this function you are granting the current Visitor or Extranet User the right to view/download the file. Links given to an Extranet User can only be used by someone logged in as that Extranet User, but links given to a Visitor who is not logged in can be used by anyone who knows the link.</p>
    <h2>Parameters</h2>
    <h3><code>&amp;$url</code></h3>
    <p style="margin-left: 40px;">The URL to download the file will be placed in this variable.</p>
    <h3><code>$cID</code></h3>
    <p style="margin-left: 40px;">The Content Id of the Content Item.</p>
    <h3><code>$cType</code></h3>
    <p style="margin-left: 40px;">The Content Type of the Content Item, e.g. document or picture.</p>
    <h3><code>$cVersion</code></h3>
    <p style="margin-left: 40px;">The version of the Content Item.</p>
    <h2>Return Value</h2>
    <p>Returns true or false, depending on whether a link was generated successfully. (An example of a case where a link might not be generated is if a file is missing from the docstore directory.)</p>
copyInDatabase:
  summary: |
    This function takes an existing file in the database, and adds a new entry.
    You would use this to copy a file that is being used under one usage to a different usage.
  desc: |
    <h2>Description</h2>
    <p>This function takes an existing file in the database, and adds a new entry.</p>
    <p>You would use this to copy a file that is being used under one usage to a different usage.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$usage</code></h3>
    <p style="margin-left: 40px;">Where the image will be used, e.g. <span class="code">email</span> or <span class="code">inline</span>.</p>
    <p style="margin-left: 40px;">See <a href="ref-core-addfiletodatabase.html"><span class="code">addFileToDatabase()</span></a> for a full description.</p>
    <h3><code>$existingFileId</code></h3>
    <p style="margin-left: 40px;">The id of an existing file in the database.</p>
    <h3><code>$filename</code></h3>
    <p style="margin-left: 40px;">A new name for the file, if you also want to rename it.</p>
    <h3><code>$mustBeAnImage</code></h3>
    <p style="margin-left: 40px;">Set this to true if the file must be an image. The CMS will then reject any non-images and this function will return false.</p>
    <h3><code>$addToDocstoreDirIfPossible</code></h3>
    <p style="margin-left: 40px;"><span>Should the CMS attempt to add this file to the docstore directory rather than the database?</span></p>
    <h2>Return Value</h2>
    <p>This function returns the new file id, or false if it failed.</p>
createPublicLink:
  summary: ""
  desc: |
    <h2>Description</h2>
    <p>This function creates a public link to a file.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.3.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$fileId</code></h3>
    <p style="margin-left: 40px;">The id of the file in the database</p>
    <h2>Return Value</h2>
    <p>Returns a link to the file.</p>
    <h2>&nbsp;</h2>
docstorePath:
  summary: |
    This function gives you the full path to the original version of a file being stored in the docstore directory.
  desc: |
    <h2>Description</h2>
    <p>This function gives you the full path to the original version of a file being stored in the docstore directory.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$fileIdOrPath</code></h3>
    <p style="margin-left: 40px;">The id of a file from the files table.</p>
    <p style="margin-left: 40px;">Alternately if you have already queried the file table, you may provide the value of the path column.</p>
mimeType:
  summary: |
    Looks up the correct mime_type to use for a file, based on its extension.
  desc: |
    <h2>Description</h2>
    <p>Looks up the correct mime_type to use for a file, based on its extension.</p>
    <h2>Parameters</h2>
    <h3><code>$file</code></h3>
    <p style="margin-left: 40px;">A file extension.</p>
    <p style="margin-left: 40px;">You may also pass in the full filename or filepath.</p>
    <h2>Return Value</h2>
    <p>The mime_type of the file, based on the extension.</p>
link:
  summary: |
    This function generates a link to download a file from the files table.
  desc: |
    <h2>Summary</h2>
    <p>This function generates a link to download a file from the files table.</p>
    <h2>Description</h2>
    <p>This function can be used to generates a download-link for any file stored in the files table, except for those that are used for Content (i.e. Documents and Picture Content Type items).</p>
    <p>Note that by calling this function you are granting the current Visitor the right to download the file.; anyone who knows the link will be able to access the file.</p>
    <h2>Parameters</h2>
    <h3><code>$fileId</code></h3>
    <p style="margin-left: 40px;">The id of the file in the files table.</p>
    <h2>Return Value</h2>
    <p>The function returns a download link, or false if the file could not be found.</p>
getDocumentFrontEndLink:
  summary: ""
  desc: |
    <h2>Description</h2>
    <p>This function creates a public or private link to a document's file.</p>
    <p>The link can be made to be always private using the parameter&nbsp;<span class="code">$privateLink = true</span>.</p>
    <p>Otherwise the document's privacy is used. If the privacy is "automatic" then the page privacy and status will determine the link. The documents privacy is then updated.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.3.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$documentId</code></h3>
    <p style="margin-left: 40px;">The id of the document&nbsp;in the database</p>
    <h3><code>$privateLink</code></h3>
    <p style="margin-left: 40px;">Set this to true if the link must be private</p>
    <h2>Return Value</h2>
    <p>Returns a link to the file.</p>
    <h2>&nbsp;</h2>
getPathOfUploadInCacheDir:
  summary: |
    Use this function to retrieve the location of a file uploaded in the Admin Box Toolkit.
  desc: |
    <h2>Description</h2>
    <p>Use this function to retrieve the location of a file uploaded in the Admin Box Toolkit.</p>
    <h2>Parameters</h2>
    <h3><code>$string</code></h3>
    <p style="margin-left: 40px;">The value of the field as returned by the Admin Box toolkit.</p>
    <p style="margin-left: 40px;">If you allow multiple uploads,&nbsp;the&nbsp;value of the field will contain a comma-separated list. You must&nbsp;<span class="code">explode()</span> the value and loop through the resulting array first, as this function only works with one file at a time.</p>
    <h2>Return Value</h2>
    <p>This function will return the path to the file in the cache directory if string in the correct format is entered.</p>
    <p>If the file was not found, the string was not in the correct format, or you entered a (numeric) file id instead of a string, this function will return&nbsp;<span class="code">false</span>.</p>
imageLink:
  summary: |
    This function generates a link to view an image.
  desc: |
    <h2>Summary</h2>
    <p>This function generates a link to view an image.</p>
    <h2>Description</h2>
    <p>This function generates a link to view an image stored in the CMS.</p>
    <p>Note that by calling this function you are granting the current Visitor the right to view the image; anyone who knows the link will be able to view the image.</p>
    <h2>Parameters</h2>
    <h3><code>&amp;$width</code></h3>
    <h3><code>&amp;$height</code></h3>
    <p style="margin-left: 40px;">The width and&nbsp;height of the image will be placed into these variables.&nbsp;If the image was resized, these will be the width and height of the resized image, not the original.</p>
    <p style="margin-left: 40px;">If you are displaying this image, you should use these value and specify its dimensions.</p>
    <h3><code>&amp;$url</code></h3>
    <p style="margin-left: 40px;">The URL to view the image will be placed in this variable.</p>
    <h3><code>$fileId</code></h3>
    <p style="margin-left: 40px;">The id of the image in the files table.</p>
    <h3><code>$widthLimit</code></h3>
    <h3><code>$heightLimit</code></h3>
    <p style="margin-left: 40px;">These parameters let you limit&nbsp;the outputted image's size.</p>
    <p style="margin-left: 40px;">(If you ask for a retina image, the&nbsp;resulting image may be twice as tall and twice as wide as you request.)</p>
    <h3><code>$mode</code></h3>
    <p style="margin-left: 40px;">If the image needs to be resized, you can set the logic used to resize it here. Possible options are:</p>
    <h4 style="margin-left: 40px;">unlimited</h4>
    <p style="margin-left: 40px;">The image will be outputted at its natural size, ignoring any width or height you enter.</p>
    <h4 style="margin-left: 40px;">adjust</h4>
    <p style="margin-left: 40px;">The image will be stretched to the width and height you enter, ignoring its original aspect ratio.</p>
    <h4 style="margin-left: 40px;">resize</h4>
    <p style="margin-left: 40px;">If it is bigger than the required size, the CMS will automatically resize it for you, maintaining aspect ratio.</p>
    <h4 style="margin-left: 40px;">fixed_width</h4>
    <p style="margin-left: 40px;">If it is bigger than the required width, the CMS will automatically resize it for you, maintaining aspect ratio.</p>
    <h4 style="margin-left: 40px;">fixed_height</h4>
    <p style="margin-left: 40px;">If it is bigger than the required height, the CMS will automatically resize it for you, maintaining aspect ratio.</p>
    <h4 style="margin-left: 40px;">resize_and_crop</h4>
    <p style="margin-left: 40px;">The image will be resized to exactly this width and height. Aspect ratio will be maintained by cropping the image if needed.</p>
    <h3><code>$offset</code></h3>
    <p style="margin-left: 40px;">If you use the <span class="code">resize_and_crop</span> option above, you can set the offset to control the centring of the cropping.</p>
    <p style="margin-left: 40px;">This needs to be a number between <span class="code">-10</span> and <span class="code">+10</span>. Negative numbers&nbsp;will move the image left or down;&nbsp;positive numbers will move the image right or up.</p>
    <h3><code>$retina</code></h3>
    <p style="margin-left: 40px;">This will display image at double density.</p>
    <p style="margin-left: 40px;">If you didn't set a width or&nbsp;height limit, the CMS&nbsp;will halve&nbsp;the effective width and height of the image.</p>
    <p style="margin-left: 40px;">If you set a width or&nbsp;height limit, then if the source image is large enough the CMS will&nbsp;output the resized image at double density, but if the source image is not large enough then this will have no effect.</p>
    <h3><code>$privacy</code></h3>
    <p style="margin-left: 40px;">You can set this to 'public' or 'private' to force an image to be public or private.</p>
    <p style="margin-left: 40px;">We recommend&nbsp;just leaving this set to 'auto'.</p>
    <h3><code>$useCacheDir</code></h3>
    <p style="margin-left: 40px;">If this is set to true, the images' URL will&nbsp;be to&nbsp;either the <span class="code">public/</span> or <span class="code">private/</span>&nbsp;directories (depending on the privacy settings).</p>
    <p style="margin-left: 40px;">If this is set to false - or if the <span class="code">public/</span> or <span class="code">private/</span>&nbsp;directories are&nbsp;not writable&nbsp;-&nbsp;the&nbsp;URL you receive will be to the <span class="code">zenario/file.php</span> program.</p>
    <h2>Return Value</h2>
    <p>Returns true or false, depending on whether a link was generated successfully. (An example of a case where a link might not be generated is if the image was not found in the database.)</p>
imageLinkArray:
  summary: |
    This gives you an array containing the src of an image, and its alt, width and height.
  desc: |
    <h2>Summary</h2>
    <p>This gives you an array containing the <span class="code">src</span> of an image, and its&nbsp;<span class="code">alt</span>, <span class="code">width</span> and <span class="code">height</span>.</p>
    <h2>Description</h2>
    <p>This function works in a similar way to the <a href="ref-core-imagelink">imageLink()</a> function, but returns an array of details&nbsp;that you can easily use in your Twig frameworks.</p>
    <p>The parameters are otherwise the same as <a href="ref-core-imagelink">imageLink()</a>.</p>
    <h2>Return Value</h2>
    <p>Returns false if the image was not found on the system, or an array if the image was found, e.g.:</p>
    <pre>array(
    'alt' =&gt; 'My image',
    'src' =&gt; 'public/images/abcde/my-image.jpg',
    'width' =&gt; 200,
    'height' =&gt; 300)</pre>
itemStickyImageId:
  summary: |
    This function returns the id of a Content Item's sticky image, if it has one.
  desc: |
    <h2>Description</h2>
    <p>This function returns the id of a Content Item's sticky image, if it has one.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$cID</code></h3>
    <h3><code>$cType</code></h3>
    <h3><code>$cVersion</code></h3>
    <p style="margin-left: 40px;">The Content Item to check.</p>
    <p style="margin-left: 40px;">If you don't specify the version, then the CMS will use either the most recent version or the published version, depending on whether an Admin is logged in.</p>
    <h2>Return Value</h2>
    <p>An id from the <span class="code">files</span> table, or <span class="code">false</span> if there is no sticky image.</p>
itemStickyImageLink:
  summary: |
    This function generates a link to view a content item's sticky image.
  desc: |
    <h2>Summary</h2>
    <p>This function generates a link to view a content item's sticky image.</p>
    <h2>Parameters</h2>
    <h3><code>$cID</code></h3>
    <p style="margin-left: 40px;">The&nbsp;id of the content item.</p>
    <h3><code>$cType</code></h3>
    <p style="margin-left: 40px;">The type of the content item.</p>
    <h3><code>$cVersion</code></h3>
    <p style="margin-left: 40px;">The&nbsp;version of the content item, can be left empty if you just want the&nbsp;published version (or the most recent version if in admin mode).</p>
    <p>The&nbsp;<span class="s1">parameters&nbsp;</span>are otherwise the same as the&nbsp;<a class="code" href="ref-core-imagelink.html">imageLink()</a>&nbsp;function.</p>
    <h2>Return Value</h2>
    <p>Returns true or false, depending on whether a link was generated successfully. (An example of a case where a link might not be generated is if the Content Item does not have a sticky image.)</p>
itemStickyImageLinkArray:
  summary: |
    This gives you an array containing the src of a content item's sticky image, and its alt, width and height.
  desc: |
    <h2>Summary</h2>
    <p>This gives you an array containing the <span class="code">src</span> of a content item's sticky image, and its&nbsp;<span class="code">alt</span>, <span class="code">width</span> and <span class="code">height</span>.</p>
    <h2>Description</h2>
    <p>This function works in a similar way to the <a href="ref-core-itemstickyimagelink">itemStickyImageLink()</a> function, but returns an array of details&nbsp;that you can easily use in your Twig frameworks.</p>
    <p>The parameters are otherwise the same as <a href="ref-core-itemstickyimagelink">itemStickyImageLink()</a>.</p>
    <h2>Return Value</h2>
    <p>Returns false if the content item does not have a sticky image, or an array if the image was found, e.g.:</p>
    <pre>array(
    'alt' =&gt; 'My image',
    'src' =&gt; 'public/images/abcde/my-image.jpg',
    'width' =&gt; 200,
    'height' =&gt; 300)</pre>
plainTextExtract:
  summary: |
    This function can extract a plain text extract from Microsoft Word documents, or from PDFs.
  desc: |
    <h2>Summary</h2>
    <p>This function can extract a plain text extract from Microsoft Word documents, or from PDFs.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <p>Reading <span class="code">.doc</span> files requires a Unix-based&nbsp;server and the Antiword program installed.</p>
    <p>Reading <span class="code">.docx</span> files requires the PHP Zip Extension enabled.</p>
    <p>Reading <span class="code">.pdf</span> files requires a Unix-based&nbsp;server and the&nbsp;pdftotext program (e.g. from the&nbsp;Poppler library).</p>
    <h2>Description</h2>
    <p>Give the path to a <span class="code">.doc</span>, <span class="code">.docx</span> or a <span class="code">.pdf</span> file, this function will return a plain text extract.</p>
    <p>The extract is intended for use in search indexing, and may not be nicely formatted.</p>
    <h2>Parameters</h2>
    <h3><code>$file</code></h3>
    <p style="margin-left: 40px;">A path to the file in the file system.</p>
    <h3><code>&amp;$extract</code></h3>
    <p style="margin-left: 40px;">An extracted plain-text version will be placed in this variable.</p>
    <h2>Return Value</h2>
    <p>This function will return true or false, depending on whether an extract could be generated and placed into the <span class="code">&amp;$extract</span> variable.</p>
    <p>(E.g. if Antiword is not available and you call&nbsp;<span class="code">plainTextExtract()</span> on a <span class="code">.doc</span> file, this function will return false.)</p>
trackDownload:
  summary: |
    This function is used to generate a string of JavaScript code which can be placed in the onclick events on links to file downloads. This download is then recorded if the site is registered on Google Analytics.
  desc: |
    <h2>Description</h2>
    <p>This function is used to generate a string of JavaScript code which can be placed in the onclick events on links to file downloads. This download is then recorded if the site is registered on Google Analytics.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.3 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$url</code></h3>
    <p style="margin-left: 40px;">The URL to appear in Google Analytics for this download. Should be in the format "public/file.png" or "private/file.png".</p>
    <h2>Return Value</h2>
    <p>A string of JavaScript code.</p>
updatePlainTextExtract:
  summary: |
    Given a Content Item with a file (e.g. a Document Content Item), this function will update its plain text extract if it can.
  desc: |
    <h2>Description</h2>
    <p>Given a Content Item with a file (e.g. a Document Content Item), this function will update its plain text extract if it can.</p>
    <h2>Where You Can Use It</h2>
    <p>See&nbsp;<a href="ref-core-plaintextextract.html">plainTextExtract()</a>&nbsp;for details.</p>
    <h2>Parameters</h2>
    <h3><code>$cID</code>, <code>$cType</code>, <code>$cVersion</code></h3>
    <p style="margin-left: 40px;">The Content Item to update.</p>
    <h3><code>$fileId</code></h3>
    <p style="margin-left: 40px;">An id of a file in the database to pull the plain text extract from.</p>
    <p style="margin-left: 40px;">Defaults to the file linked to the Content Item if not set.</p>
    <h2>Return Value</h2>
    <p>No return value.</p>
