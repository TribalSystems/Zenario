---
value:
  summary: |
    A drop-in replacement for accessing a variable from an array, which will not issue a php warning if the variable is not set.
  desc: |
    <h2>Description</h2>
    <p>A drop-in replacement for accessing a variable from an array, which will not issue a php warning if the variable is not set.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <p>From 5.2.5 and onwards you can access nested arrays using <code>$key2</code>, <code>$key3</code>...</p>
    <h2>Shortcut for</h2>
    <pre>is_array($array) &amp;&amp; isset($array[$key])? $array[$key] : false</pre>
    <h2>Example</h2>
    <pre>if (arrayKey($myArray, 'key') == 'value')</pre>
valuesToKeys:
  summary: |
    This reads the values from an array, and creates a new array with the values from the first array as keys, and all the values as true. This is useful for some TUIX properties that need to be in this format.
  desc: |
    <h2>Description</h2>
    <p>This&nbsp;reads the values from an array,&nbsp;and creates a new array with the&nbsp;values from the first array as keys, and all the&nbsp;values as true. This is useful for some&nbsp;TUIX&nbsp;properties that need to be in this format.</p>
    <h2>Parameters</h2>
    <h3><code>$a</code></h3>
    <p style="margin-left: 40px;">An array of values</p>
engToBooleanArray:
  summary: |
    A shortcut function to writing engToBoolean(arrayKey(...)).
  desc: |
    <h2>Description</h2>
    <p>A shortcut function to writing&nbsp;<span class="code">engToBoolean(arrayKey(...))</span>.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
explodeAndTrim:
  summary: |
    Given a string, this function explodes it and then trims all of the values.
    It then returns an array of all the non-empty values.
  desc: |
    <h2>Description</h2>
    <p>Given a string, this function explodes it and then trims all of the values.</p>
    <p>It then returns an array of all the non-empty&nbsp;values.</p>
    <h2>Parameters</h2>
    <h3><code>$string</code></h3>
    <p style="margin-left: 40px;">A string to explode&nbsp;</p>
    <h3><code>$mustBeNumeric</code></h3>
    <p style="margin-left: 40px;">If this is set to true, only non-zero numeric values&nbsp;will be added to the array.</p>
    <h3><code>$separator</code></h3>
    <p style="margin-left: 40px;">The separator to use, defaults&nbsp;to a comma.</p>
    <h2>Return Value</h2>
    <p>The resulting array.</p>
    <p>(If&nbsp;the input string&nbsp;was empty, an empty array will be returned.)</p>
explodeDecodeAndTrim:
  summary: |
    Given a string, this function explodes it, then trims all of the values, and then applies decodeItemIdForOrganizer() to them.
    It then returns an array of all the non-empty values.
  desc: |
    <h2>Description</h2>
    <p>Given a string, this function explodes it, then trims all of the values, and then applies <span class="code">decodeItemIdForOrganizer()</span> to them.</p>
    <p>It then returns an array of all the non-empty&nbsp;values.</p>
    <h2>Parameters</h2>
    <h3><code>$string</code></h3>
    <p style="margin-left: 40px;">A string to explode&nbsp;</p>
    <h3><code>$separator</code></h3>
    <p style="margin-left: 40px;">The separator to use, defaults&nbsp;to a comma.</p>
    <h2>Return Value</h2>
    <p>The resulting array.</p>
    <p>(If&nbsp;the input string&nbsp;was empty, an empty array will be returned.)</p>
in:
  summary: |
    This function returns true if its first input is equal to any of its other inputs.
  desc: |
    <h2>Description</h2>
    <p>This function returns true if its first input is equal to any of its other inputs.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Example</h2>
    <pre>$letter = 'b';<br />$isVowel  = in($letter, 'a', 'e', 'i', 'o', 'u');
    </pre>
    <p>Note that <span class="code">if</span> or <span class="code">switch</span> would be slightly more efficient, but code using this function is sometimes more readable.</p>
issetArrayKey:
  summary: |
    A drop in replacement for accessing a variable from an array in a boolean statement, which will not issue an error if the variable is not set.
  desc: |
    <h2>Description</h2>
    <p>A drop in replacement for accessing a variable from an array in a boolean statement, which will not issue an error if the variable is not set.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <p>From 5.2.5 and onwards you can check nested arrays using <code>$key2</code>, <code>$key3</code>...</p>
    <h2>Shortcut for</h2>
    <pre>is_array($array) &amp;&amp; isset($array[$key]) &amp;&amp; $array[$key]</pre>
    <h2>Example</h2>
    <p>The following code could be used to check if a value was set in an array and was not empty:</p>
    <pre>if (issetArrayKey($myArray, 'key'))</pre>
    <p>If you were certain that <span class="code">$myArray</span> was an array, the example above could be be rewritten using pure PHP:</p>
    <pre>if (!empty($myArray['key']))</pre>
    <p>This second example is more efficient as it doesn't involve a function call, but would not work as expected if <span class="code">$myArray</span> was a string.</p>
grabValue:
  summary: |
    This function can be used to get a specific value from an array of merge field values, where you're not sure of the index name but have a few ideas about what it might be called.
  desc: |
    <h2>Description</h2>
    <p>This function can be used to get a specific value from an array of merge field values, where you're not sure of the index name but have a few ideas about what it might be called.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$array</code></h3>
    <p style="margin-left: 40px;">An associative array.</p>
    <h3><code>$key1, $key2, ..., $keyn</code></h3>
    <p style="margin-left: 40px;">A series of possible keys.</p>
    <h2>Return Value</h2>
    <p>The first value found, or <span class="code">false</span> if no value was found.</p>
    <h2>Example</h2>
    <pre>$cID = pullFromArray($mergeFields, 'cid', 'contentid', 'id');</pre>
    <p>Note that case insensitive matching is used. Also note that the matching will ignore any non-alphanumeric characters.</p>
sqlSort:
  summary: |
    Takes an associative array and uses MySQL sorting to sorts its elements by value.
  desc: |
    <h2>Summary</h2>
    <p>Takes an associative array and uses MySQL sorting to sorts its elements by value.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Description</h2>
    <p>PHP's sorting functions do not sort foreign characters very logically. For example, a &uuml; would not be sorted between the letters t and v.</p>
    <p>This function will take an array, convert it into a MySQL query, sort it, and then turn it back.</p>
    <h2>Parameters</h2>
    <h3><code>$phpArray</code></h3>
    <p style="margin-left: 40px;">An array to be sorted.</p>
    <p style="margin-left: 40px;">This is not limited to being one level in depth.&nbsp;While this function will not sort recursively, it can be used to sort the top level of an array of arrays; these will be converted to a JSON string for sorting purposes.</p>
    <h2>Return Value</h2>
    <p>No return value.</p>
