---
affectedRows:
  summary: |
    Returns the number of rows affected by the last SQL query.
  desc: |
    <h2>Summary</h2>
    <p>Returns the&nbsp;number of rows affected by the last SQL query.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.2 onwards.</p>
    <h2>Description</h2>
    <p>A shortcut function to&nbsp;<span class="code">cms_core::$lastDB-&gt;affected_rows</span>.</p>
    <p>Note that this can be 0 even if rows were matched, as only&nbsp;rows that are changed count as affected rows.</p>
errno:
  summary: |
    Returns the error code generated by the last SQL query.
  desc: |
    <h2>Summary</h2>
    <p>Returns the error code generated by the last SQL query.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.2 onwards.</p>
    <h2>Description</h2>
    <p>A shortcut function to&nbsp;<span class="code">cms_core::$lastDB-&gt;errno</span>.</p>
error:
  summary: |
    Returns the error message generated by the last SQL query.
  desc: |
    <h2>Summary</h2>
    <p>Returns the&nbsp;error message generated by the last SQL query.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.2 onwards.</p>
    <h2>Description</h2>
    <p>A shortcut function to&nbsp;<span class="code">cms_core::$lastDB-&gt;error</span>.</p>
fetchAssoc:
  summary: |
    Returns the next row from a SQL SELECT query as an associative array.
  desc: |
    <h2>Summary</h2>
    <p>Returns&nbsp;the next row from a SQL SELECT query as an associative array.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.2 onwards.</p>
    <h2>Description</h2>
    <p>A shortcut function to the <span class="code">fetch_assoc()</span> function in MySQLi.</p>
    <h2>Parameters</h2>
    <h3><code>$result</code></h3>
    <p style="margin-left: 40px;">You should pass in the result from a call to <span class="code">sqlSelect()</span> or <span class="code">getRows()</span>.</p>
    <p style="margin-left: 40px;">If you only want one row then you can chain the calls, e.g.:</p>
    <pre style="margin-left: 40px;">sqlFetchAssoc(sqlSelect("..."))</pre>
    <p style="margin-left: 40px;">or from version 7.3 onwards you can pass this function a string directly, e.g.:</p>
    <pre style="margin-left: 40px;">sqlFetchAssoc("...")</pre>
    <h2>Return Value</h2>
    <p>An associative array containing the row.</p>
fetchRow:
  summary: |
    Returns the next row from a SQL SELECT query as an array.
  desc: |
    <h2>Summary</h2>
    <p>Returns&nbsp;the next row from a SQL SELECT query as an array.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.2 onwards.</p>
    <h2>Description</h2>
    <p>A shortcut function to the <span class="code">fetch_row()</span> function in MySQLi.</p>
    <h2>Parameters</h2>
    <h3><code>$result</code></h3>
    <p style="margin-left: 40px;">You should pass in the result from a call to <span class="code">sqlSelect()</span> or <span class="code">getRows()</span>.</p>
    <p style="margin-left: 40px;">If you only want one row then you can chain the calls, e.g.:</p>
    <pre style="margin-left: 40px;">sqlFetchRow(sqlSelect("..."))</pre>
    <p style="margin-left: 40px;">or from version 7.3 onwards you can pass this function a string directly, e.g.:</p>
    <pre style="margin-left: 40px;">sqlFetchRow("...")</pre>
    <h2>Return Value</h2>
    <p>An array containing the row.</p>
insertId:
  summary: |
    Returns the primary key that was created by the last SQL query.
  desc: |
    <h2>Summary</h2>
    <p>Returns the primary key that was created&nbsp;by the last SQL query.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.2 onwards.</p>
    <h2>Description</h2>
    <p>A shortcut function to&nbsp;<span class="code">cms_core::$lastDB-&gt;insert_id</span>.</p>
numRows:
  summary: |
    Returns the number of rows from a SQL SELECT query.
  desc: |
    <h2>Summary</h2>
    <p>Returns&nbsp;the number of rows from a SQL SELECT query.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.2 onwards.</p>
    <h2>Description</h2>
    <p>A shortcut function to the <span class="code">mysqli_num_rows()</span> function.</p>
    <h2>Parameters</h2>
    <h3><code>$result</code></h3>
    <p style="margin-left: 40px;">You should pass in the result from a call to <span class="code">sqlSelect()</span> or <span class="code">getRows()</span>.</p>
    <p style="margin-left: 40px;">Or from version 7.3 onwards you can pass this function a string directly, e.g.:</p>
    <pre style="margin-left: 40px;">sqlNumRows("...")</pre>
    <h2>Return Value</h2>
    <p>An associative array containing the row.</p>
select:
  summary: |
    This function lets you run a SQL SELECT query against the current database.
  desc: |
    <h2>Description</h2>
    <p>This function lets you run a SQL SELECT query against the current database.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.2 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$sql</code></h3>
    <p style="margin-left: 40px;">A string containing a SQL query.</p>
    <p style="margin-left: 40px;">This&nbsp;<strong>must</strong> be a SELECT query. It&nbsp;<strong>must not</strong> be a DELETE/INSERT/REPLACE/UPDATE query.</p>
    <h2>Return Value</h2>
    <p>Returns a MySQLi results object that you can use with the&nbsp;<span class="code">sqlFetchAssoc()</span>,&nbsp;<span class="code">sqlFetchRow()</span> and&nbsp;<span class="code">sqlNumRows()</span> functions.</p>
    <p>Note that in the event of a a database error, this function will stop execution with an <span class="code">exit</span> command, rather than return a value.</p>
update:
  summary: |
    This function lets you run a SQL DELETE/INSERT/REPLACE/UPDATE against the current database.
  desc: |
    <h2>Description</h2>
    <p>This function lets you run a SQL DELETE/INSERT/REPLACE/UPDATE against the current database.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.2 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$sql</code></h3>
    <p style="margin-left: 40px;">A string containing a SQL DELETE/INSERT/REPLACE/UPDATE&nbsp;query.</p>
    <h3><code>$checkCache</code></h3>
    <p style="margin-left: 40px;">The CMS have a page caching feature which stores copies of content items in the cache directory.</p>
    <p style="margin-left: 40px;">If you make a change to the database using&nbsp;this function&nbsp;then the CMS will attempt to work out what has just changed by looking for a table name in your SQL statement. If it can't find the table name then the entire cache will be cleared.</p>
    <p style="margin-left: 40px;">You can disable this check by setting <span class="code">$checkCache</span> to <span class="code">false</span>,&nbsp;however this may cause&nbsp;visitors to a&nbsp;site to see out of date pages.</p>
    <p style="margin-left: 40px;">If you want your database updates to be more cache-friendly, then you should use the <span class="code">deleteRow()</span>, <span class="code">insertRow()</span>, <span class="code">setRow()</span> and <span class="code">updateRow()</span> functions where possible as these functions give the CMS a better idea of what is being changed.</p>
    <h2>Return Value</h2>
    <p>Returns the result of the&nbsp;<span class="code">mysqli_query()</span> function.</p>
