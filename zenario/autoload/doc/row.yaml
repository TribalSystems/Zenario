---
exists:
  summary: >
    Checks whether a given row in a given
    table exists in the database.
  desc: |
    <h2>Description</h2>
    <p>Checks whether a given row in a given table exists in the database.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$table</code></h3>
    <p style="margin-left: 40px;">The name of a table to check.</p>
    <p style="margin-left: 40px;">You do not need to add the <code>DB_PREFIX</code>, this will be added automatically.</p>
    <h3><code>$ids</code></h3>
    <p style="margin-left: 40px;">An associative array of keys (column names) to values&nbsp;to search for; see <a href="format-of-id-and-values-for-database-functions.html">Format of $id and $values for Database Functions</a> for details.</p>
    <h3>&nbsp;</h3>
    <h2>Return Value</h2>
    <p>Returns true if the given row exists or false if it does not.</p>
    <h2>Notes</h2>
    <p>Queries will be run against the last database that was connected to. This will be the local database, unless you switch database using a function such as&nbsp;<span class="code">connectGlobalDB()</span>.</p>
    <h2>Example</h2>
    <pre>checkRowExists('users', array('username' =&gt; 'Bob'));
    </pre>
    <p>Checks to see if a User called "Bob" exists.</p>
delete:
  summary: |
    Deletes a row from a table in the database.
    If page caching is in use on a site, the cache will be cleared depending on the tables or rows affected.
  desc: |
    <h2>Description</h2>
    <p>Deletes a row from a table in the database.</p>
    <p>If page caching is in use on a site, the cache will be cleared depending on the tables or rows affected.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$table</code></h3>
    <p style="margin-left: 40px;">The name of a table.</p>
    <p style="margin-left: 40px;">To meet our guidelines this should be one of your own Plugin's tables, as you may not directly modify a table belonging to another Plugin or the core.</p>
    <h3><code>$ids</code></h3>
    <p style="margin-left: 40px;">An associative array of keys (column names) to values&nbsp;to be deleted; see <a href="format-of-id-and-values-for-database-functions.html">Format of $id and $values for Database Functions</a> for details.</p>
    <h3>&nbsp;</h3>
    <h3><code>$multiple</code></h3>
    <p style="margin-left: 40px;">If multiple rows match, should the all be deleted? Defaults to <code>true</code>, but you may wish to set it to <code>false</code> as a safety catch.</p>
    <h2>Return Value</h2>
    <p>Returns the results of a <span class="code">mysqli_affected_rows()</span> call.</p>
    <h2>Notes</h2>
    <p>Queries will be run against the last database that was connected to. This will be the local database, unless you switch database using a function such as&nbsp;<span class="code">connectGlobalDB()</span>.</p>
    <h2>Example</h2>
    <pre>deleteRow(MY_ANIMAL_MANAGER_PREFIX. 'animals', array('name' =&gt; 'Chicken'));
    </pre>
    <p>Deletes a row from the animals table named "Chicken".</p>
distinctQuery:
  summary: |
    Gets multiple rows from a given table in the database.
    This works just like the getRows() function, except the DISTINCT keyword is used in MySQL to remove duplicate rows.
  desc: |
    <h2>Description</h2>
    <p>Gets multiple rows from a given table in the database.</p>
    <p>This works just like the <span class="code"><a href="ref-core-getrows">getRows()</a></span> function, except the <span class="code">DISTINCT</span> keyword is used in MySQL to remove duplicate rows.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
getDistinctAssocs:
  summary: |
    Gets multiple rows from a given table in the database as a PHP array.
    This works just like the getRowsArray() function, except the DISTINCT keyword is used in MySQL to remove duplicate rows.
  desc: |
    <h2>Description</h2>
    <p>Gets multiple rows from a given table in the database as a PHP array.</p>
    <p>This works just like the <span class="code"><a href="ref-core-getrowsarray">getRowsArray()</a></span> function, except the <span class="code">DISTINCT</span> keyword is used in MySQL to remove duplicate rows.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
get:
  summary: |
    Gets either a row, or the value of a specific column in a row, from a given table in the database.
  desc: |
    <h2>Description</h2>
    <p>Gets either a row, or the value of a specific column in a row, from a given table in the database.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$table</code></h3>
    <p style="margin-left: 40px;">The name of a table to check.</p>
    <p style="margin-left: 40px;">You do not need to add the <code>DB_PREFIX</code>, this will be added automatically.</p>
    <h3><code>$cols</code></h3>
    <p style="margin-left: 40px;">This can be either the name of a column, or an array of column names.</p>
    <p style="margin-left: 40px;">From Zenario 7.0.0 onwards you this can be set to <span class="code">true</span> to perform a <span class="code">SELECT *</span> query, returning every column in the table. However, as per our <a href="coding-standards.html">coding practices</a>, you should not do this unless you do need every row in the table.</p>
    <h3><code>$ids</code></h3>
    <p style="margin-left: 40px;">An associative array of keys (column names) to values to search for; see <a href="format-of-id-and-values-for-database-functions.html">Format of $id and $values for Database Functions</a> for details.</p>
    <p style="margin-left: 40px;">If multiple rows match, only the first one to be found will be returned.</p>
    <h3><code>$notZero</code></h3>
    <p style="margin-left: 40px;">If set to <code>true</code>, this function will insist that the value returned must not be zero. Defaults to <code>false</code>.</p>
    <p style="margin-left: 40px;">Only has any effect if you enter the name of a numeric column into <code>$cols</code>, and will be ignored if you enter an array of column names into <code>$cols</code>.</p>
    <h3>&nbsp;</h3>
    <h2>Return Value</h2>
    <p>If no row was found, this function returns false.</p>
    <p>Otherwise, if <code>$cols</code> was given the name of a column then it returns the value of a column, but if <code>$cols</code> was given an array of column names then it returns an associative array of keys (column names)&nbsp;=&gt; values.</p>
    <h2>Notes</h2>
    <p>Queries will be run against the last database that was connected to. This will be the local database, unless you switch database using a function such as&nbsp;<span class="code">connectGlobalDB()</span>.</p>
    <h2>Example</h2>
    <pre>getRow('users', 'email', array('username' =&gt; 'Bob'));
    </pre>
    <p>Get the email address of a User called "Bob".</p>
    <pre>getRow('users', array('screen_name', 'email'), array('username' =&gt; 'Bob'));
    </pre>
    <p>Get the email address and Screen Name of a User called "Bob" in an associative array.</p>
query:
  summary: |
    Gets multiple rows from a given table in the database.
  desc: |
    <h2>Description</h2>
    <p>Gets multiple rows from a given table in the database.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$table</code></h3>
    <p style="margin-left: 40px;">The name of a table to check.</p>
    <p style="margin-left: 40px;">You do not need to add the <code>DB_PREFIX</code>, this will be added automatically.</p>
    <h3><code>$cols</code></h3>
    <p style="margin-left: 40px;">This can be either the name of a column, or an array of column names.</p>
    <p style="margin-left: 40px;">From Zenario 7.0.0 onwards you this can be set to&nbsp;<span class="code">true</span>&nbsp;to perform a&nbsp;<span class="code">SELECT *</span>&nbsp;query, returning every column in the table. However, as per our&nbsp;<a href="coding-standards.html">coding practices</a>, you should not do this unless you do need every row in the table.</p>
    <h3><code>$ids</code></h3>
    <p style="margin-left: 40px;">An associative array of keys (column names) to values to search for; see <a href="format-of-id-and-values-for-database-functions.html">Format of $id and $values for Database Functions</a> for details.</p>
    <h3><code>$orderBy</code></h3>
    <p style="margin-left: 40px;">A column name, or an array of column names to order by.</p>
    <h3><code>$notZero</code></h3>
    <p style="margin-left: 40px;">If set to <code>true</code>, this function will insist that the values returned must not be zero. Defaults to <code>false</code>.</p>
    <p style="margin-left: 40px;">Only has any effect if you enter the name of a numeric column into <code>$cols</code>, and will be ignored if you enter an array of column names into <code>$cols</code>.</p>
    <h3>&nbsp;</h3>
    <h2>Return Value</h2>
    <p>The result of a <code>mysql_query()</code>&nbsp;function call.</p>
    <h2>Notes</h2>
    <p>Queries will be run against the last database that was connected to. This will be the local database, unless you switch database using a function such as&nbsp;<span class="code">connectGlobalDB()</span>.</p>
    <h2>Example</h2>
    <pre>getRows('users', array('id, 'username'), array('first_name' =&gt; 'Bob'), 'last_name');
    </pre>
    <p>Gets the id and username of all users whose first name is "Bob", ordered by their last name.</p>
getArray:
  summary: |
    Gets multiple rows from a given table in the database as a PHP array.
  desc: |
    <h2>Description</h2>
    <p>Gets multiple rows from a given table in the database as a PHP array.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$table</code></h3>
    <p style="margin-left: 40px;">The name of a table to check.</p>
    <p style="margin-left: 40px;">You do not need to add the <code>DB_PREFIX</code>, this will be added automatically.</p>
    <h3><code>$cols</code></h3>
    <p style="margin-left: 40px;">This can be either the name of a column, or an array of column names.</p>
    <p style="margin-left: 40px;">You this can be set to&nbsp;<span class="code">true</span>&nbsp;to perform a&nbsp;<span class="code">SELECT *</span>&nbsp;query, returning every column in the table. However, as per our&nbsp;<a href="coding-standards.html">coding practices</a>, you should not do this unless you do need every row in the table.</p>
    <h3><code>$ids</code></h3>
    <p style="margin-left: 40px;">An associative array of keys (column names) to values to search for; see <a href="format-of-id-and-values-for-database-functions.html">Format of $id and $values for Database Functions</a> for details.</p>
    <p style="margin-left: 40px;">This defaults to an empty array, which will return every row in the table. This may be useful for small config tables with a fix number of rows, but trying to store a large database table in memory may lead to out-of-memory errors; in these cases you should use the <a href="ref-core-getrows.html"><span class="code">getRows()</span></a> function instead.</p>
    <h3><code>$orderBy</code></h3>
    <p style="margin-left: 40px;">A column name, or an array of column names to order by.</p>
    <h3><code>$notZero</code></h3>
    <p style="margin-left: 40px;">If set to <code>true</code>, this function will insist that the values returned must not be zero. Defaults to <code>false</code>.</p>
    <p style="margin-left: 40px;">Only has any effect if you enter the name of a numeric column into <code>$cols</code>, and will be ignored if you enter an array of column names into <code>$cols</code>.</p>
    <h3>&nbsp;</h3>
    <h2>Return Value</h2>
    <p>This will return a PHP array, containing all of the rows found.</p>
    <p>If the table has one column declared as a primary key, the array will be an associative array indexed by this column.</p>
    <p>If <span class="code">$cols</span> was given the name of a column then the array will be a one-dimensional array, containing one entry for value of the column. Otherwise it will be a two-dimensional array, containing an&nbsp;associative arrays of keys (column names) =&gt; values for each row.</p>
    <h2>Notes</h2>
    <p>Queries will be run against the last database that was connected to. This will be the local database, unless you switch database using a function such as&nbsp;<span class="code">connectGlobalDB()</span>.</p>
insert:
  summary: |
    Inserts a row in a given table in the database.
    If page caching is in use on a site, the cache will be cleared depending on the tables or rows affected.
  desc: |
    <h2>Description</h2>
    <p>Inserts a row in a given table in the database.</p>
    <p>If page caching is in use on a site, the cache will be cleared depending on the tables or rows affected.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$table</code></h3>
    <p style="margin-left: 40px;">The name of a table to insert into.</p>
    <p style="margin-left: 40px;">To meet our guidelines this should be one of your own Plugin's tables, as you may not directly modify a table belonging to another Plugin or the core.</p>
    <h3><code>$values</code></h3>
    <p style="margin-left: 40px;">An associative array of keys (column names) to values to set; see <span class="code">Format of $id and $values for Database Functions</span> for details.</p>
    <h3><code>$ignore</code></h3>
    <p style="margin-left: 40px;">From version 7.1, you can set this to true to do an <span class="code">INSERT IGNORE</span>.</p>
    <h2>Return Value</h2>
    <p>This function returns the result of a <code>mysqli_insert_id()</code> call.</p>
    <h2>Notes</h2>
    <p>Queries will be run against the last database that was connected to. This will be the local database, unless you switch database using a function such as&nbsp;<span class="code">connectGlobalDB()</span>.</p>
    <h2>Example</h2>
    <pre>insertRow(MY_ANIMAL_MANAGER_PREFIX. 'animals', array('name' =&gt; 'Chicken'));
    </pre>
    <p>This inserts a row into the animals table&nbsp;with a name of "Chicken".</p>
count:
  summary: |
    This function does a simple SELECT COUNT(*) on a table.
  desc: |
    <h2>Description</h2>
    <p>This function does a simple <span class="code">SELECT COUNT(*)</span> on a table.</p>
    <h2>Parameters</h2>
    <h3><code>$table</code></h3>
    <p style="margin-left: 40px;">The name of a table to check.</p>
    <p style="margin-left: 40px;">You do not need to add the <code>DB_PREFIX</code>, this will be added automatically.</p>
    <h3><code>$ids</code></h3>
    <p style="margin-left: 40px;">An associative array of keys (column names) to values to search for; see <a href="format-of-id-and-values-for-database-functions.html">Format of $id and $values for Database Functions</a> for details.</p>
max:
  summary: |
    This function lets you quickly do a SELECT MAX() statement against a table in the database.
  desc: |
    <h2>Description</h2>
    <p>This function lets you quickly do a <span class="code">SELECT MAX()</span> statement against a table in the database.</p>
    <h2>Parameters</h2>
    <h3><code>$table</code></h3>
    <p style="margin-left: 40px;">The name of a table to check.</p>
    <p style="margin-left: 40px;">You do not need to add the <code>DB_PREFIX</code>, this will be added automatically.</p>
    <h3><code>$cols</code></h3>
    <p style="margin-left: 40px;">This can be either the name of a column, or an array of column names.</p>
    <p style="margin-left: 40px;">If you specify more than one&nbsp;column, then&nbsp;you'll get the <span class="code">MAX()</span> of each column in an array.</p>
    <h3><code>$ids</code></h3>
    <p style="margin-left: 40px;">An associative array of keys (column names) to values to search for; see <a href="format-of-id-and-values-for-database-functions.html">Format of $id and $values for Database Functions</a> for details.</p>
min:
  summary: |
    This function lets you quickly do a SELECT MIN() statement against a table in the database.
  desc: |
    <h2>Description</h2>
    <p>This function lets you quickly do a <span class="code">SELECT MIN()</span> statement against a table in the database.</p>
    <h2>Parameters</h2>
    <h3><code>$table</code></h3>
    <p style="margin-left: 40px;">The name of a table to check.</p>
    <p style="margin-left: 40px;">You do not need to add the <code>DB_PREFIX</code>, this will be added automatically.</p>
    <h3><code>$cols</code></h3>
    <p style="margin-left: 40px;">This can be either the name of a column, or an array of column names.</p>
    <p style="margin-left: 40px;">If you specify more than one&nbsp;column, then&nbsp;you'll get the <span class="code">MIN()</span> of each column in an array.</p>
    <h3><code>$ids</code></h3>
    <p style="margin-left: 40px;">An associative array of keys (column names) to values to search for; see <a href="format-of-id-and-values-for-database-functions.html">Format of $id and $values for Database Functions</a> for details.</p>
set:
  summary: |
    Inserts or updates a row in a given table in the database.
    If page caching is in use on a site, the cache will be cleared depending on the tables or rows affected.
  desc: |
    <h2>Description</h2>
    <p>Inserts or updates a row in a given table in the database.</p>
    <p>If page caching is in use on a site, the cache will be cleared depending on the tables or rows affected.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$table</code></h3>
    <p style="margin-left: 40px;">The name of a table to insert into or update.</p>
    <p style="margin-left: 40px;">To meet our guidelines this should be one of your own Plugin's tables, as you may not directly modify a table belonging to another Plugin or the core.</p>
    <h3><code>$values</code></h3>
    <p style="margin-left: 40px;">An associative array of keys (column names) to values to set; see&nbsp;<a href="format-of-id-and-values-for-database-functions.html">Format of $id and $values for Database Functions</a> for details.</p>
    <p style="margin-left: 40px;">From version 5.2.7, you can pass an empty array into <span class="code">$values</span>, if you just want to make sure that a row matched by <span class="code">$ids</span> exists in the table, but don't actually want to change any of the columns.</p>
    <h3><code>$ids</code></h3>
    <p style="margin-left: 40px;">An associative array of keys (column names) to values; see <a href="format-of-id-and-values-for-database-functions.html">Format of $id and $values for Database Functions</a> for details.</p>
    <p style="margin-left: 40px;">If a row in the table matches, then that row will be updated with <code>$values</code>. Otherwise a row will be inserted in the table containing the values of both <code>$values</code> and <code>$ids</code>.</p>
    <p style="margin-left: 40px;">If your primary key column is an auto-increment, then entering either an id of zero or an id that doesn't match will force this function to insert a new row. The id of this new row will be the auto-increment value; regardless of the value you provided.</p>
    <p style="margin-left: 40px;">Entering an empty array will force this function to insert a row. (Note that this is slightly different behaviour to the rest of the Database Functions, where entering an empty array will match every row in the table.)</p>
    <h3>&nbsp;</h3>
    <h2>Return Value</h2>
    <p>If a row was inserted, then this function will return the result of a <code>mysqli_insert_id()</code> call to give you&nbsp;the primary key.</p>
    <p>The primary key will also be returned when updating a row in the table, even if the primary key was not specified in the <span class="code">$ids</span> array.</p>
    <p>This only applies to tables with a single-column primary key.</p>
    <h2>Notes</h2>
    <p>Queries will be run against the last database that was connected to. This will be the local database, unless you switch database using a function such as&nbsp;<span class="code">connectGlobalDB()</span>.</p>
    <h2>Example</h2>
    <pre>setRow(MY_ANIMAL_MANAGER_PREFIX. 'animals', array('name' =&gt; 'Chicken'), array('id' =&gt; 7));
    </pre>
    <p>If a row exists in the animals table with an id of 7, its name is updated to "Chicken".</p>
    <p>If a row with that id did not exist, a new one will be inserted in with a name of "Chicken".&nbsp;(Note that the function will also attempt to set the id of that row to 7, however if the id column has an auto-increment on it then this will be ignored.)</p>
update:
  summary: |
    Updates a row in a given table in the database.
    If page caching is in use on a site, the cache will be cleared depending on the tables or rows affected.
  desc: |
    <h2>Description</h2>
    <p>Updates a row in a given table in the database.</p>
    <p>If page caching is in use on a site, the cache will be cleared depending on the tables or rows affected.</p>
    <h2>Where You Can Use It</h2>
    <p>From Zenario 7.0.0 onwards.</p>
    <h2>Parameters</h2>
    <h3><code>$table</code></h3>
    <p style="margin-left: 40px;">The name of a table to insert into or update.</p>
    <p style="margin-left: 40px;">To meet our guidelines this should be one of your own Plugin's tables, as you may not directly modify a table belonging to another Plugin or the core.</p>
    <h3><code>$values</code></h3>
    <p style="margin-left: 40px;">An associative array of keys (column names) to values&nbsp;to set; see <a href="format-of-id-and-values-for-database-functions.html">Format of $id and $values for Database Functions</a> for details.</p>
    <h3><code>$ids</code></h3>
    <p style="margin-left: 40px;">An associative array of keys (column names) to values to update; see <a href="format-of-id-and-values-for-database-functions.html">Format of $id and $values for Database Functions</a> for details.</p>
    <p style="margin-left: 40px;">All rows that match will be updated with&nbsp;<code>$values</code>.</p>
    <p style="margin-left: 40px;">From version 6.0.2, <span class="code">updateRow()</span>&nbsp;will now update every row in the table if you pass it an&nbsp;empty array of <span class="code">$ids</span>, in line with the rest of the database functions.</p>
    <h3><code>$ignore</code></h3>
    <p style="margin-left: 40px;">From version 7.1, you can set this to true to do an <span class="code">UPDATE IGNORE</span>.</p>
    <h2>Return Value</h2>
    <p>This function returns the result of a <span class="code">mysqli_affected_rows()</span> call. Note that this can be 0 even if rows were matched, as <span class="code">mysqli_affected_rows()</span> only returns the number of rows where the values were changed to something new.</p>
    <h2>Notes</h2>
    <p>Queries will be run against the last database that was connected to. This will be the local database, unless you switch database using a function such as&nbsp;<span class="code">connectGlobalDB()</span>.</p>
    <h2>Example</h2>
    <pre>updateRow(MY_ANIMAL_MANAGER_PREFIX. 'animals', array('name' =&gt; 'Chicken'), array('id' =&gt; 7));
    </pre>
    <p>If a row exists in the animals table with an id of 7, its name is updated to "Chicken".</p>
