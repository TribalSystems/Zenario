<?php
/*
 * Copyright (c) 2017, Tribal Limited
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Zenario, Tribal Limited nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL TRIBAL LTD BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
if (!defined('NOT_ACCESSED_DIRECTLY')) exit('This file may not be directly accessed');


class zenario_common_features__admin_boxes__plugin_settings extends module_base_class {
	
	//To do:
		//Maybe display the path of the filename that is/will be used?
		//If the file exists and is not empty, load the CSS from it into the editor
		//If the CSS in the file does not mention the right class,
			//the system should put an empty CSS clause in to get the designer started
		//Add a check for whether the editable_css directories are writable in the diagnostics page
		//If the file/directory is not writable, the edit box should be readonly.
		//Otherwise it should save to the file.
		//If the edit box was empty, or only contains the empty CSS clause generated by the system,
			//no need to save an empty file - it should be not saved/deleted if it existed
	
	protected $skinWritableDir = false;
	
	protected function getPluginCSSFilepath(&$box, $thisPlugin) {
		
		if ($thisPlugin && !empty($box['key']['isVersionControlled'])) {
			return false;
		
		} elseif (!empty($box['key']['skinId'])) {
			$skin = getRow('skins', array('id', 'family_name', 'name'), $box['key']['skinId']);
			$this->skinWritableDir = getSkinPath($skin['family_name'], $skin['name']). 'editable_css/';
			return $this->skinWritableDir. '2.'. $this->getPluginCSSName($box, $thisPlugin). '.css';
		
		//If we possibly can, try to get the Skin that this plugin is being shown on
		} elseif (cms_core::$skinId) {
			$box['key']['skinId'] = cms_core::$skinId;
			$this->skinWritableDir = getSkinPath(). 'editable_css/';
			return $this->skinWritableDir. '2.'. $this->getPluginCSSName($box, $thisPlugin). '.css';
		
		} else
		if ($box['key']['cID']
		 && ($content = getRow('content_items', true, array('id' => $box['key']['cID'], 'type' => $box['key']['cType'])))
		 && ($version = getRow('content_item_versions', true, array('id' => $box['key']['cID'], 'type' => $box['key']['cType'], 'version' => $box['key']['cVersion'])))) {
			setShowableContent($content, $version);
			$box['key']['skinId'] = cms_core::$skinId;
			$this->skinWritableDir = getSkinPath(). 'editable_css/';
			return $this->skinWritableDir. '2.'. $this->getPluginCSSName($box, $thisPlugin). '.css';
		}
		
		//If we don't know where this plugin will be used, check to see if there's only
		//one skin on this site. If so, show the CSS options anyway as we know what skin
		//will be used!
		$skins = getRowsArray('skins', array('id', 'family_name', 'name'), array('missing' => 0));
		
		if (count($skins) == 1) {
			$skin = array_pop($skins);
			$box['key']['skinId'] = $skin['id'];
			$this->skinWritableDir = getSkinPath($skin['family_name'], $skin['name']). 'editable_css/';
			return $this->skinWritableDir. '2.'. $this->getPluginCSSName($box, $thisPlugin). '.css';
		}
		
		//Otherwise try and use the default skin for the grid_templates directory
		$skinId = getRow('template_families', 'skin_id', array('family_name' => 'grid_templates'));
		if ($skinId && !empty($skins[$skinId])) {
			$skin = $skins[$skinId];
			$box['key']['skinId'] = $skin['id'];
			$this->skinWritableDir = getSkinPath($skin['family_name'], $skin['name']). 'editable_css/';
			return $this->skinWritableDir. '2.'. $this->getPluginCSSName($box, $thisPlugin). '.css';
		}
		
		return false;
	}
	
	protected function getPluginCSSName(&$box, $thisPlugin) {
		
		$baseCSSName = getRow('modules', 'css_class_name', $box['key']['moduleId']);
		
		if (!$thisPlugin || $box['key']['cID'] == -1) {
			return $baseCSSName;
		}
		
		$cssName = $baseCSSName;
		
		if ($box['key']['isVersionControlled']) {
			$cssName = $box['key']['cType']. '_'. $box['key']['cID']. '_'. $box['key']['slotName']. '_'. $cssName;
		
			if ($box['key']['eggId']) {
				$row = getRow('nested_plugins', true, $box['key']['eggId']);
				$cssName .= '_'. $row['tab']. '_'. $row['ord'];
			}
			
		} else {
			$cssName .= '_'. $box['key']['instanceId'];
			
			if ($box['key']['eggId']) {
				$cssName .= '_'. $box['key']['eggId'];
			}
		}
		
		return $cssName;
	}

	public function fillAdminBox($path, $settingGroup, &$box, &$fields, &$values) {
		if ($_GET['refiner__nest'] ?? false) {
			$box['key']['instanceId'] = $_GET['refiner__nest'] ?? false;
			$box['key']['eggId'] = (int) ($_GET['id'] ?? false);

		} elseif (!ifNull($_GET['instanceId'] ?? false, ($_GET['id'] ?? false)) && ($_GET['refiner__plugin'] ?? false)) {
			$box['key']['instanceId'] = false;
			$box['key']['eggId'] = 0;
			$box['key']['moduleId'] = $_GET['refiner__plugin'] ?? false;

		} else {
			$box['key']['moduleId'] = (int) ($_GET['moduleId'] ?? false);
			$box['key']['instanceId'] = ifNull($_GET['instanceId'] ?? false, ($_GET['id'] ?? false));
			$box['key']['eggId'] = (int) ($_GET['eggId'] ?? false);
		}
		
		if ($box['key']['eggId']) {
			
			if ($egg = getNestDetails($box['key']['eggId'], $box['key']['instanceId'])) {
				$box['key']['moduleId'] = $egg['module_id'];
				$box['key']['slideNum'] = $egg['slide_num'];
				$module = getModuleDetails($box['key']['moduleId']);
				$instance = getPluginInstanceDetails($egg['instance_id']);
			
			} else {
				echo adminPhrase('Nested plugin not found.');
				exit;
			}
		
		} elseif ($box['key']['instanceId']) {
			$instance = getPluginInstanceDetails($box['key']['instanceId']);
			$box['key']['moduleId'] = $instance['module_id'];
			$module = getModuleDetails($instance['module_id']);
		
		} elseif ($box['key']['moduleId']) {
			$module = getModuleDetails($box['key']['moduleId']);
			$instance = array('framework' => $module['default_framework'], 'css_class' => '');
		
		} else {
			$module = $instance = getPluginInstanceDetails($box['key']['instanceId']);
			$box['key']['moduleId'] = $instance['module_id'];
		}
		
		$module['display_name'] = getModuleDisplayName($box['key']['moduleId']);


		$box['key']['isVersionControlled'] = !empty($instance['content_id']);
		$box['key']['cID'] = ifNull($instance['content_id'] ?? false, ($_GET['cID'] ?? false), ($_GET['parent__cID'] ?? false));
		$box['key']['cType'] = ifNull($instance['content_type'] ?? false, ($_GET['cType'] ?? false), ($_GET['parent__cType'] ?? false));
		$box['key']['cVersion'] = ifNull($instance['content_version'] ?? false, ($_GET['cVersion'] ?? false));
		$box['key']['slotName'] = ifNull($instance['slot_name'] ?? false, ($_GET['slotName'] ?? false));
		$box['key']['languageId'] = ifNull(getContentLang($box['key']['cID'], $box['key']['cType']), cms_core::$defaultLang);


		if ($box['key']['isVersionControlled']) {
			$box['css_class'] .= ' zenario_wireframe_plugin_settings';
		} else {
			$box['css_class'] .= ' zenario_reusable_plugin_settings';
	
			if ($box['key']['eggId']) {
				exitIfNotCheckPriv('_PRIV_VIEW_REUSABLE_PLUGIN');
			} elseif ($box['key']['instanceId']) {
				exitIfNotCheckPriv('_PRIV_VIEW_REUSABLE_PLUGIN');
			} else {
				exitIfNotCheckPriv('_PRIV_MANAGE_REUSABLE_PLUGIN');
			}
		}


		$canEdit = false;
		if ($box['key']['isVersionControlled']) {
			if (isDraft($status = getContentStatus($box['key']['cID'], $box['key']['cType'])) || $box['key']['eggId']) {
				$canEdit = checkPriv('_PRIV_EDIT_DRAFT', $box['key']['cID'], $box['key']['cType'], $box['key']['cVersion']);
			} else {
				$canEdit =
					$status == 'published'
				 && checkPriv('_PRIV_CREATE_REVISION_DRAFT', $box['key']['cID'], $box['key']['cType'])
				 && $box['key']['cVersion'] == getLatestVersion($box['key']['cID'], $box['key']['cType']);
			}

		} else {
			if ($box['key']['eggId']) {
				$canEdit = checkPriv('_PRIV_MANAGE_REUSABLE_PLUGIN');
			} else {
				$canEdit = checkPriv('_PRIV_MANAGE_REUSABLE_PLUGIN');
			}
		}

		$title = '';

		switch ($path) {
			case 'plugin_settings':

				if (empty($instance['instance_name'])) {
					//Load the XML description for this plugin, and get the default instance name
					$desc = false;
					if (loadModuleDescription($module['class_name'], $desc)) {
						$instanceName = $desc['default_instance_name'];
					} else {
						$instanceName = '';
					}
				} else {
					$instanceName = $instance['instance_name'];
				}

				//If this is a new instance, try and ensure that the name we are suggesting is unique
				if (!$box['key']['instanceId']) {
					$count = selectCount('plugin_instances', array('name' => array('LIKE' => $instanceName. '%')));
					if ($count) {
						$instanceName .= ' ('. ($count + 1). ')';
					}
				}
		
				$values['first_tab/instance_name'] = $instanceName;

				$valuesInDB = array();
				loadAllPluginSettings($box, $valuesInDB);

				if (!empty($box['tabs']) && is_array($box['tabs'])) {
					foreach ($box['tabs'] as $tabName => &$tab) {
						if (is_array($tab)) {
							if (!$canEdit) {
								$tab['edit_mode'] = array('enabled' => false);
							} else {
								if (empty($tab['edit_mode'])) {
									$tab['edit_mode'] = array();
								}
			
								$tab['edit_mode']['enabled'] = true;
								$tab['edit_mode']['always_on'] = true;
								$tab['edit_mode']['enable_revert'] = true;
							}
						
							if (!empty($tab['fields']) && is_array($tab['fields'])) {
								foreach ($tab['fields'] as $fieldName => &$field) {
									if (is_array($field)) {
										if (!empty($field['plugin_setting']['name']) && isset($valuesInDB[$field['plugin_setting']['name']])) {
											$field['value'] = $valuesInDB[$field['plugin_setting']['name']];
										}
									}
								}
							}
						}
					}
				}


				//Even if there are no settings for this plugin, then we still want to have
				//one or two fixed fields at the start; e.g. the name of the instance as the very first field
				//Nested modules have a little more information
				if ($box['key']['eggId']) {
					$fields['first_tab/instance_name']['hidden'] = true;

				} else {
					if ($box['key']['instanceId']) {
						$fields['first_tab/instance_name']['readonly'] = true;
					}
					if ($box['key']['isVersionControlled']) {
						$fields['first_tab/instance_name']['hidden'] = true;
					}
				}
		
		
				// Get admin box title
				if ($box['key']['eggId'] && $box['key']['isVersionControlled']) {
					$title = 
						adminPhrase('Editing a plugin of the "[[module]]" module, in the [[instanceName]]',
							array('module' => htmlspecialchars($module['display_name']),
								  'instanceName' => htmlspecialchars($instanceName)));
		
				} elseif ($box['key']['eggId']) {
					$title = 
						adminPhrase('Editing a plugin of the "[[module]]" module, in the nest "[[instanceName]]"',
							array('module' => htmlspecialchars($module['display_name']),
								  'instanceName' => htmlspecialchars($instanceName)));
		
				} elseif ($box['key']['isVersionControlled']) {
					$title = 
						adminPhrase('Editing the [[module]]',
							array('module' => htmlspecialchars($module['display_name'])));
		
				} elseif ($box['key']['instanceId']) {
					$title = 
						adminPhrase('Editing a plugin of the module "[[module]]"',
							array('module' => htmlspecialchars($module['display_name'])));
		
				} else {
					$title = 
						adminPhrase('Creating a plugin of the "[[module]]" module',
							array('module' => htmlspecialchars($module['display_name'])));
				}
		
				// Get modules description file
				$moduleDescription = "No module decription found for this plugin.";
				$path = moduleDescriptionFilePath($module['class_name']);
		
				$tags = zenarioReadTUIXFile(CMS_ROOT . $path);
				if ($tags && isset($tags['description']) && $tags['description']) {
					$moduleDescription = $tags['description'];
			
				//check inheritance 
				} else if ($tags && isset($tags['inheritance']['inherit_description_from_module']) && $tags['inheritance']['inherit_description_from_module']) {
					$path = moduleDescriptionFilePath($tags['inheritance']['inherit_description_from_module']);
					$tags = zenarioReadTUIXFile(CMS_ROOT . $path);
					if ($tags && isset($tags['description']) && $tags['description']) {
						$moduleDescription = $tags['description'];
					}
				}
				$fields['last_tab/module_description']['snippet']['html'] = 
					'<div class="module_description">' . $moduleDescription . '</div>';
		
				break;
	
			case 'plugin_css_and_framework':
		
				$instanceName = $instance['instance_name'];
		
				if ($canEdit) {
					$box['tabs']['all_css_tab']['edit_mode'] =
					$box['tabs']['this_css_tab']['edit_mode'] =
					$box['tabs']['framework_tab']['edit_mode'] = array('enabled' => true);
				}

				//Load the values from the database
				if ($box['key']['eggId']) {
					$sql = "
						SELECT name_or_title, framework, css_class
						FROM ". DB_NAME_PREFIX. "nested_plugins
						WHERE id = ". (int) $box['key']['eggId'];
	
					$result = sqlQuery($sql);
					$row = sqlFetchAssoc($result);
					$values['framework_tab/framework'] = $framework = $row['framework'];
					$values['this_css_tab/css_class'] = $row['css_class'];

				} else {
					$values['framework_tab/framework'] = $framework = $instance['framework'];
					$values['this_css_tab/css_class'] = $instance['css_class'];
				}


				//Look for frameworks
				$fields['framework_tab/framework']['values'] = listModuleFrameworks($module['class_name']);

				if (!empty($fields['framework_tab/framework']['values'])) {
					if ($module['default_framework']
					 && isset($fields['framework_tab/framework']['values'][$module['default_framework']])) {
						$fields['framework_tab/framework']['values'][$module['default_framework']]['label'] .=
							adminPhrase(' (default)');
					}
					if (!isset($fields['framework_tab/framework']['values'][$framework])) {
						$fields['framework_tab/framework']['values'][$framework] =
							array('ord' => 0, 'label' => adminPhrase('[[framework]] (missing from filesystem)', array('framework' => $framework)));
					}

				} else {
					$fields['framework_tab/framework']['hidden'] =
					$fields['framework_tab/framework_path']['hidden'] =
					$fields['framework_tab/framework_source']['hidden'] = true;
				}
				
				
				$thisCSSPath = $this->getPluginCSSFilepath($box, true);
				$thisCSSName = $this->getPluginCSSName($box, true);
				$allCSSPath = $this->getPluginCSSFilepath($box, false);
				$allCSSName = $this->getPluginCSSName($box, false);
				
				$skinIsEditable = (bool) getRow('skins', 'enable_editable_css', $box['key']['skinId']);
				
				if ($box['key']['skinId']) {
					$fields['this_css_tab/css_path']['snippet']['label'] = $thisCSSPath;
					$values['this_css_tab/css_filename'] = basename($thisCSSPath);
					
					$fields['all_css_tab/css_class']['snippet']['label'] = $module['css_class_name'];
					$fields['all_css_tab/css_path']['snippet']['label'] = $allCSSPath;
					$values['all_css_tab/css_filename'] = basename($allCSSPath);
					
					if ($thisCSSPath) {
						$file_exists = file_exists($filepath = CMS_ROOT. $thisCSSPath);
						
						if (!checkPriv('_PRIV_EDIT_CSS') || !$skinIsEditable) {
							 $is_writable = false;
						} else {
							if ($file_exists) {
								$is_writable = is_writable($filepath);
							} else {
								$is_writable = is_writable(CMS_ROOT. $this->skinWritableDir);
							}
							
							if ($is_writable) {
								$fields['this_css_tab/use_css_file']['side_note'] = adminPhrase('Enter CSS to be applied to this plugin.');
							} else {
								$fields['this_css_tab/use_css_file']['side_note'] = adminPhrase('The &quot;editable_css&quot; directory is not writable.');
							}
						}
						
						$values['this_css_tab/use_css_file'] = $file_exists;
						$fields['this_css_tab/use_css_file']['hidden'] = !$file_exists && !$skinIsEditable;
						$fields['this_css_tab/use_css_file']['readonly'] =
						$fields['this_css_tab/css_source']['readonly'] = !$is_writable;
				
						if ($file_exists
						 && ($css = file_get_contents($filepath))
						 && (trim($css))) {
							$values['this_css_tab/css_source'] = $css;
						} else {
							$values['this_css_tab/css_source'] = '.'. $thisCSSName. " {\n\t\n}";
						}
					} else {
						$fields['this_css_tab/use_css_file']['hidden'] =
						$fields['this_css_tab/css_path']['hidden'] =
						$fields['this_css_tab/css_source']['hidden'] = true;
					}
					
					
					$file_exists = file_exists($filepath = CMS_ROOT. $allCSSPath);
					
					if (!checkPriv('_PRIV_EDIT_CSS') || !$skinIsEditable) {
						 $is_writable = false;
					} else {
						if ($file_exists) {
							$is_writable = is_writable($filepath);
						} else {
							$is_writable = is_writable(CMS_ROOT. $this->skinWritableDir);
						}
						
						if ($is_writable) {
							$fields['all_css_tab/use_css_file']['side_note'] = adminPhrase('Enter CSS to be applied to all plugins derived from this module.');
						} else {
							$fields['all_css_tab/use_css_file']['side_note'] = adminPhrase('The &quot;editable_css&quot; directory is not writable.');
						}
					}
					
					$values['all_css_tab/use_css_file'] = $file_exists;
					$fields['all_css_tab/use_css_file']['hidden'] = !$file_exists && !$skinIsEditable;
					$fields['all_css_tab/use_css_file']['readonly'] =
					$fields['all_css_tab/css_source']['readonly'] = !$is_writable;
				
					if ($file_exists
					 && ($css = file_get_contents($filepath))
					 && (trim($css))) {
						$values['all_css_tab/css_source'] = $css;
					} else {
						$values['all_css_tab/css_source'] = '.'. $module['css_class_name']. " {\n\t\n}";
					}
					
					
					//Attempt to load a list of CSS Class Names from the description file of the current Skin
					//to add choices in for the CSS Class Picker.
					$skin = $skinDescriptionFilePath = false;
					if ($skin = getSkinFromId($box['key']['skinId'])) {
						$skinDescriptionFilePath = skinDescriptionFilePath($skin['family_name'], $skin['name'], true);
					}
					
					//Load all of the possible values, and add a "default" and a "custom" value
					$fields['this_css_tab/css_class']['values']['#default#']['label'] = $module['css_class_name']. '__default_style';
		
					if ($skin) {
						$i = 1;
						foreach (getSkinCSSClassNames($skin, 'plugin', $module['css_class_name']) as $cssClass => $label) {
							$fields['this_css_tab/css_class']['values'][$cssClass] = array('label' => $label, 'ord' => ++$i);
						}
					}
		
					foreach ($fields['this_css_tab/css_class']['values'] as &$value) {
						if ($thisCSSName) {
							$value['label'] = $module['css_class_name']. ' '. $thisCSSName. ' '. $value['label'];
						} else {
							$value['label'] = $module['css_class_name']. ' '. $value['label'];
						}
					}
		
					//If no CSS class was entered, pick the "default" value
					if ($values['this_css_tab/css_class'] == '') {
						$values['this_css_tab/css_class'] = '#default#';
		
					//If the value is not in the list, pick the "custom" value
					} elseif (empty($fields['this_css_tab/css_class']['values'][$values['this_css_tab/css_class']])) {
						$values['this_css_tab/css_class_custom'] = $values['this_css_tab/css_class'];
						$values['this_css_tab/css_class'] = '#custom#';
					}
				
					if ($skinDescriptionFilePath) {
						$fields['this_css_tab/css_class']['side_note'] =
							adminPhrase('Add CSS classes by picking existing ones from the list or by writing your own in the text box. A designer can add new styles to this list by editing the [[path]] file.', array('path' => $skinDescriptionFilePath));
					} else {
						$fields['this_css_tab/css_class']['side_note'] =
							adminPhrase('Add CSS classes by picking existing ones from the list or by writing your own in the text box.');
					}
				
					$box['tabs']['this_css_tab']['label'] = $this->phrase('CSS (this [[display_name]])', $module);
				
					if (substr($module['display_name'], 0, -1) == 's') {
						$box['tabs']['all_css_tab']['label'] = $this->phrase('CSS (all [[display_name]]es)', $module);
					} else {
						$box['tabs']['all_css_tab']['label'] = $this->phrase('CSS (all [[display_name]]s)', $module);
					}
				} else {
					$box['tabs']['this_css_tab']['hidden'] = true;
					$box['tabs']['all_css_tab']['hidden'] = true;
				}
		
				// Get admin box title
				if ($box['key']['eggId'] && $box['key']['isVersionControlled']) {
					$title = 
						adminPhrase('CSS & framework for a plugin of the "[[module]]" module, in the [[instanceName]]',
							array('module' => htmlspecialchars($module['display_name']),
								  'instanceName' => htmlspecialchars($instanceName)));
		
				} elseif ($box['key']['eggId']) {
					$title = 
						adminPhrase('CSS & framework for a plugin of the "[[module]]" module, in the nest "[[instanceName]]"',
							array('module' => htmlspecialchars($module['display_name']),
								  'instanceName' => htmlspecialchars($instanceName)));
		
				} elseif ($box['key']['isVersionControlled']) {
					$title = 
						adminPhrase('CSS & framework for the [[module]]',
							array('module' => htmlspecialchars($module['display_name'])));
		
				} else {
					$title = 
						adminPhrase('CSS & framework for a plugin of the module "[[module]]"',
							array('module' => htmlspecialchars($module['display_name'])));
				}
		
				break;
		}


		$box['title'] = $title;
		
		//Set a flag if this is a plugin in a conductor
		$box['key']['usesConductor'] = $box['key']['eggId'] && conductorEnabled($box['key']['instanceId']);
		
	}

	public function formatAdminBox($path, $settingGroup, &$box, &$fields, &$values, $changes) {
		switch ($path) {
			case 'plugin_css_and_framework':
				if (!empty($values['framework_tab/framework'])) {

					$module = getModuleDetails($box['key']['moduleId']);

					if ($frameworkFile = frameworkPath($values['framework_tab/framework'], $module['class_name'], true)) {
						$values['framework_tab/framework_source'] = file_get_contents($frameworkFile);
						$fields['framework_tab/framework_source']['language'] = $frameworkFile;
						$fields['framework_tab/framework_path']['hidden'] = false;
						$fields['framework_tab/framework_path']['snippet']['label'] = $frameworkFile;

					} else {
						$values['framework_tab/framework_source'] = '';
						$fields['framework_tab/framework_source']['language'] = '';
						$fields['framework_tab/framework_path']['hidden'] = true;
						$fields['framework_tab/framework_path']['snippet']['label'] = '';
					}
					
					$box['tabs']['this_css_tab']['notices']['golive']['show'] =
						$box['key']['isVersionControlled']
					 && empty($fields['this_css_tab/use_css_file']['readonly'])
					 && $values['this_css_tab/use_css_file'];

				}
		
				break;
		}
		
	}


	public function validateAdminBox($path, $settingGroup, &$box, &$fields, &$values, $changes, $saving) {
		$box['confirm']['show'] = false;
		if (!$box['key']['instanceId']) {
			createNewInstance(
				$box['key']['moduleId'],
				$values['first_tab/instance_name'],
				$box['key']['instanceId'],
				$box['tabs']['first_tab']['errors'],
				$onlyValidate = true);

		} else {
			$instance = getPluginInstanceDetails($box['key']['instanceId']);
	
			if ($instance['content_id']) {
				if (!isDraft($status = getContentStatus($instance['content_id'], $instance['content_type']))) {
					if ($status != 'published') {
						$box['tabs']['first_tab']['errors'][] = adminPhrase('This content item is not a draft and cannot be edited.');
					} else {
						$box['confirm']['show'] = true;
					}
				}
	
			} else {
				$mrg = array(
					'pages' => checkInstancesUsage($box['key']['instanceId'], false),
					'published' => checkInstancesUsage($box['key']['instanceId'], true));
		
				if ($mrg['published'] > 0
				 || $mrg['pages'] > ($box['key']['frontEnd']? 1 : 0)) {
			
					$box['confirm']['show'] = true;
					$box['confirm']['html'] = true;
					$box['confirm']['button_message'] = adminPhrase('Save');
			
					$box['confirm']['message'] = 
						'<p>'. adminPhrase('You are changing the settings of this plugin. The change will be <b>immediate</b> and cannot be undone.'). '</p>';
					
					if ($mrg['pages'] > 1) {
						$mrg['link'] = htmlspecialchars(getPluginInstanceUsageStorekeeperDeepLink($instance['instance_id'], $instance['module_id']));
						if ($mrg['published'] > 1) {
							$box['confirm']['message'] .= 
								'<p>'. adminPhrase('This will affect [[published]] content items immediately (as they are published), [[pages]] items in total.', $mrg). '</p>';
						} else {
							$box['confirm']['message'] .= 
								'<p>'. adminPhrase('This will affect 1 content item immediately (as it is published), [[pages]] items in total.', $mrg). '</p>';
						}
						
						$box['confirm']['message'] .= 
							'<p>'. adminPhrase('<a href="[[link]]" target="_blank">Click for a list of all content items affected</a> (this can be found normally in Organizer, under Modules).', $mrg). '</p>';
					
					} else
					if ($mrg['published'] == 1
					 && ($citems = checkInstancesUsage($box['key']['instanceId'], true, false, true))
					 && (!empty($citems))
					 && ($mrg['tag'] = formatTag($citems[0]['id'], $citems[0]['type']))) {
						
						$box['confirm']['message'] .= 
							'<p>'. adminPhrase('This will affect the content item &quot;[[tag]]&quot; immediately as it is published.', $mrg). '</p>';
					}
				}
			}
		}
		
	}
	
	
	public function saveAdminBox($path, $settingGroup, &$box, &$fields, &$values, $changes) {
		$module = getModuleDetails($box['key']['moduleId']);
		$instance = array();

		if ($box['key']['instanceId']) {
			$instance = getPluginInstanceDetails($box['key']['instanceId']);
		}

		//Load details of this Instance, and check for permissions to save
		if (!empty($instance['content_id'])) {
	
			//If this Wireframe is already on a draft, then there's no need to create one
			if (isDraft($instance['content_id'], $instance['content_type'])) {
				exitIfNotCheckPriv('_PRIV_EDIT_DRAFT', $instance['content_id'], $instance['content_type'], $instance['content_version']);
	
			//Don't create a draft for Nested modules, the interface can't handle this
			} elseif ($box['key']['eggId']) {
				return;
	
			//Otherwise create a new draft
			} else {
				exitIfNotCheckPriv('_PRIV_CREATE_REVISION_DRAFT', $instance['content_id'], $instance['content_type']);
		
				//Create a new Content Item, or a new Draft of a Content Item, if this wireframe isn't already on a draft.
				$cVersionTo = $instance['content_version'];
				createDraft($instance['content_id'], $instance['content_id'], $instance['content_type'], $cVersionTo, $instance['content_version']);
				$box['key']['cVersion'] = $cVersionTo;
		
				//This wireframe will now be using a new instance id on the newly created draft
				$box['key']['instanceId'] =
					getVersionControlledPluginInstanceId(
						$instance['content_id'], $instance['content_type'], $cVersionTo, $instance['slot_name'], $instance['module_id']);
			
				//Remove the slot name, to force the CMS to reload the entire page
				$box['key']['slotName'] = false;
			}

		} elseif ($box['key']['eggId']) {
			exitIfNotCheckPriv('_PRIV_MANAGE_REUSABLE_PLUGIN');

		} else {
			exitIfNotCheckPriv('_PRIV_MANAGE_REUSABLE_PLUGIN');
	
			//Handle creating a new instance
			if (!$box['key']['instanceId']) {
				$errors = array();
				createNewInstance(
					$box['key']['moduleId'],
					$values['first_tab/instance_name'],
					$box['key']['instanceId'],
					$errors);
		
				$box['key']['id'] = $box['key']['instanceId'];
				$instance = getPluginInstanceDetails($box['key']['instanceId']);
			}
		}

		$syncLibraryPluginFiles = array();
		$syncContent = false;
		$pk = array(
			'instance_id' => $box['key']['instanceId'],
			'egg_id' => $box['key']['eggId']);


		switch ($path) {
			case 'plugin_settings':

				//Loop through each field that would be in the Admin Box, and has the <plugin_setting> tag set
				if (!empty($box['tabs']) && is_array($box['tabs'])) {
					foreach ($box['tabs'] as $tabName => &$tab) {
						if (is_array($tab) && engToBoolean($box['tabs'][$tabName]['edit_mode']['on'] ?? false)) {
							if (!empty($tab['fields']) && is_array($tab['fields'])) {
								foreach ($tab['fields'] as $fieldName => &$field) {
									if (is_array($field)) {
										if (!empty($field['plugin_setting']['name'])) {
											$pk['name'] = $field['plugin_setting']['name'];
											
											$defaultValue = '';
											if (isset($field['plugin_setting']['value'])) {
												$defaultValue = $field['plugin_setting']['value'];
											} elseif (isset($field['value'])) {
												$defaultValue = $field['value'];
											}
											
											//Don't save a value for a field if it was hidden...
											if (engToBoolean($tab['hidden'] ?? false)
											 || engToBoolean($tab['_was_hidden_before'] ?? false)
											 || engToBoolean($field['hidden'] ?? false)
											 || engToBoolean($field['_was_hidden_before'] ?? false)) {
												
												if ($defaultValue) {
													//If a setting has a default value, we'll need to store a blank in the database
													//to make it clear that the field was hidden and not set
													setRow('plugin_settings', ['value' => ''], $pk);
												} else {
													//Otherwise we can just delete the row
													deleteRow('plugin_settings', $pk);
												}
					
											//...or a multiple edit field that is not marked as changed
											} else
											if (isset($field['multiple_edit'])
											 && !$changes[$tabName. '/'. $fieldName]) {
												deleteRow('plugin_settings', $pk);
					
											//...or fields that have not changed, and have the "dont_save_default_value"
											//option set.
											} else
											if (engToBoolean($field['plugin_setting']['dont_save_default_value'] ?? false)
											 && $defaultValue
											 && (!isset($field['current_value'])
											  || $field['current_value'] == $defaultValue)) {
												deleteRow('plugin_settings', $pk);
					
											} else {
												//Otherwise save the field in the plugin_settings table.
												$value = array();
												$value['value'] = arrayKey($values, $tabName. '/'. $fieldName);
								
								
												//Handle file/image uploaders by adding these files to the system
												if (!empty($field['upload'])) {
													$fileIds = array();
													foreach (explodeAndTrim($value['value']) as $file) {
														if ($location = Ze\File::getPathOfUploadedInCacheDir($file)) {
															$fileIds[] = Ze\File::addToDatabase('image', $location);
														} else {
															$fileIds[] = $file;
														}
													}
													$value['value'] = implode(',', $fileIds);
												}
							
						
												//The various different types of foreign key should be registered
												if (!$value['value'] || empty($field['plugin_setting']['foreign_key_to'])) {
													$value['dangling_cross_references'] = 'remove';
													$value['foreign_key_to'] = NULL;
													$value['foreign_key_id'] = 0;
													$value['foreign_key_char'] = '';
						
												} else {
													$value['dangling_cross_references'] = ifNull($field['plugin_setting']['dangling_cross_references'] ?? false, 'remove');
													$value['foreign_key_to'] = $field['plugin_setting']['foreign_key_to'];
						
													if ($field['plugin_setting']['foreign_key_to'] == 'categories') {
														$value['foreign_key_id'] = 0;
														$value['foreign_key_char'] = '';
							
													} elseif ($field['plugin_setting']['foreign_key_to'] == 'content') {
														$cID = $cType = false;
														getCIDAndCTypeFromTagId($cID, $cType, $value['value']);
								
														$value['foreign_key_id'] = $cID;
														$value['foreign_key_char'] = $cType;
							
													} elseif ($field['plugin_setting']['foreign_key_to'] == 'email_template') {
														$value['foreign_key_id'] = 0;
														$value['foreign_key_char'] = $value['value'];
							
													} elseif (in($field['plugin_setting']['foreign_key_to'], 'category', 'file', 'menu_section')) {
														$value['foreign_key_id'] = $value['value'];
														$value['foreign_key_char'] = '';
							
													} elseif (is_numeric($value['value'])) {
														$value['foreign_key_id'] = $value['value'];
														$value['foreign_key_char'] = $value['value'];
							
													} else {
														$value['foreign_key_id'] = 0;
														$value['foreign_key_char'] = $value['value'];
													}
												}
								
												//Work out whether this is a version controlled or synchronized Instance
												if (!$instance['content_id']) {
													$value['is_content'] = 'synchronized_setting';
									
													switch ($field['plugin_setting']['foreign_key_to'] ?? false) {
														case 'file':
															if ($fileId = (int) trim($value['value'])) {
																$syncLibraryPluginFiles[$fileId] = array('id' => $fileId);
															}
															break;
										
														case 'multiple_files':
															foreach (explodeAndTrim($value['value']) as $fileId) {
																if ($fileId = (int) $fileId) {
																	$syncLibraryPluginFiles[$fileId] = array('id' => $fileId);
																}
															}
															break;
													}
											
						
												} elseif (engToBoolean($field['plugin_setting']['is_searchable_content'] ?? false)) {
													$value['is_content'] = 'version_controlled_content';
													$syncContent = true;
						
												} else {
													$value['is_content'] = 'version_controlled_setting';
							
													if (in($field['plugin_setting']['foreign_key_to'] ?? false, 'file', 'multiple_files')) {
														$syncContent = true;
													}
												}
						
												if (!$trimedValue = trim($value['value'])) {
													$value['format'] = 'empty';
						
												} elseif (html_entity_decode($trimedValue) != $trimedValue || strip_tags($trimedValue) != $trimedValue) {
													if (engToBoolean($field['plugin_setting']['translate'] ?? false)) {
														$value['format'] = 'translatable_html';
													} else {
														$value['format'] = 'html';
													}
						
												} else {
													if (engToBoolean($field['plugin_setting']['translate'] ?? false)) {
														$value['format'] = 'translatable_text';
													} else {
														$value['format'] = 'text';
													}
												}
								
												if (isset($field['plugin_setting']['is_email_address'])) {
													$value['is_email_address'] = $field['plugin_setting']['is_email_address'];
												} else {
													$value['is_email_address'] = NULL;
												}
								
												setRow('plugin_settings', $value, $pk);
											}
										}
									}
								}
							}
						}
					}
				}
				
				//Set the Nested Plugin's name
				if ($box['key']['eggId']) {
					//For Nested Plugins, check to see if there is a Plugin Setting with the <use_value_for_plugin_name> tag set,
					//which should be the name of the Nested Plugin
					//Empty or Hidden fields don't count; otherwise the value of <use_value_for_plugin_name> indicates which field has priority.
					$eggName = false;
					$eggNameCurrentPriority = false;
					foreach ($box['tabs'] as $tabName => &$tab) {
						if (is_array($tab)
						 && !engToBoolean($tab['hidden'] ?? false)
						 && !engToBoolean($tab['_was_hidden_before'] ?? false)
						 && !empty($tab['fields']) && is_array($tab['fields'])) {
			
							foreach ($tab['fields'] as $fieldName => &$field) {
								if (is_array($field)
								 && !empty($values[$tabName. '/'. $fieldName])
								 && !empty($field['plugin_setting']['use_value_for_plugin_name'])
								 && !engToBoolean($field['hidden'] ?? false)
								 && !engToBoolean($field['_was_hidden_before'] ?? false)
								 && ($eggNameCurrentPriority === false || $eggNameCurrentPriority > (int) $field['plugin_setting']['use_value_for_plugin_name'])) {
					
									$eggName = $values[$tabName. '/'. $fieldName];
									$editMode = engToBoolean($tab['edit_mode']['on'] ?? false)? '_' : '';
									$eggNameCurrentPriority = (int) $field['plugin_setting']['use_value_for_plugin_name'];
									
									//T10290 - for an internal link, only record the tag id and not the alias and publishing status
									// (which will get out of date!)
									if (empty($field['pick_items']['target_path'])
									 || $field['pick_items']['target_path'] != 'zenario__content/panels/content') {
										
										//Attempt to get a display value, rather than the actual value
										$items = explode(',', $eggName);
										if (!empty($field['values'][$items[0]])) {
										    $eggName = !is_array($field['values'][$items[0]]) ? $field['values'][$items[0]] : $field['values'][$items[0]]['label'];
					
										} elseif (!empty($field['values'][$eggName])) {
											$eggName = $field['values'][$eggName];
					
										} elseif (!empty($field['_display_value'])) {
											$eggName = $field['_display_value'];
										}
									}
								}
							}
						}
					}
					
					if (is_array($eggName)) {
						$eggName = $eggName['label'] ?? false;
					}
	
					if ($eggName) {
						$eggName = getModuleDisplayName($box['key']['moduleId']). ': '. $eggName;
					} else {
						$eggName = getModuleDisplayName($box['key']['moduleId']);
					}
	
					updateRow('nested_plugins', array('name_or_title' => mb_substr($eggName, 0, 250, 'UTF-8')), $box['key']['eggId']);
				}

				if ($instance['content_id']) {
					if ($syncContent) {
						syncInlineFileContentLink($instance['content_id'], $instance['content_type'], $instance['content_version']);
					}
	
					//Update the last modified date on the Content Item if this is a Wireframe Plugin
					updateVersion($instance['content_id'], $instance['content_type'], $instance['content_version']);

				} else {
					syncInlineFiles(
						$syncLibraryPluginFiles,
						array('foreign_key_to' => 'library_plugin', 'foreign_key_id' => $box['key']['instanceId']),
						$keepOldImagesThatAreNotInUse = false);
				}
		
				break;
	
	
			case 'plugin_css_and_framework':

				//Save the framework, if set
				$vals = array();
				$vals['framework'] = $values['framework_tab/framework'];
		
		
				//The "default" value is stored as an empty string
				if ($values['this_css_tab/css_class'] == '#default#') {
					$vals['css_class'] = '';
		
				//If the value is not in the list, pick the "custom" value
				} elseif ($values['this_css_tab/css_class'] == '#custom#') {
					$vals['css_class'] = $values['this_css_tab/css_class_custom'];
		
				} else {
					$vals['css_class'] = $values['this_css_tab/css_class'];
				}
		
				if ($box['key']['eggId']) {
					updateRow('nested_plugins', $vals, $box['key']['eggId']);
				} else {
					updateRow('plugin_instances', $vals, $box['key']['instanceId']);
				}
				
				//Save the CSS files, if they were there
				if ($box['key']['skinId'] && checkPriv('_PRIV_EDIT_CSS') && getRow('skins', 'enable_editable_css', $box['key']['skinId'])) {
					$thisCSSPath = $this->getPluginCSSFilepath($box, true);
					$thisCSSName = $this->getPluginCSSName($box, true);
					$allCSSPath = $this->getPluginCSSFilepath($box, false);
					$allCSSName = $this->getPluginCSSName($box, false);
					
					if ($thisCSSPath) {
						if (file_exists($filepath = CMS_ROOT. $thisCSSPath)) {
							if (is_writable($filepath)) {
								if ($values['this_css_tab/use_css_file']) {
									file_put_contents($filepath, $values['this_css_tab/css_source']);
								} else {
									unlink($filepath);
								}
							}
						} else {
							if ($values['this_css_tab/use_css_file']
							 && is_writable(CMS_ROOT. $this->skinWritableDir)) {
								file_put_contents($filepath, $values['this_css_tab/css_source']);
								@chmod($filepath, 0666);
							}
						}
					}
					
					if (file_exists($filepath = CMS_ROOT. $allCSSPath)) {
						if (is_writable($filepath)) {
							if ($values['all_css_tab/use_css_file']) {
								file_put_contents($filepath, $values['all_css_tab/css_source']);
							} else {
								unlink($filepath);
							}
						}
					} else {
						if ($values['all_css_tab/use_css_file']
						 && is_writable(CMS_ROOT. $this->skinWritableDir)) {
							file_put_contents($filepath, $values['all_css_tab/css_source']);
							@chmod($filepath, 0666);
						}
					}
					
					if (!($_REQUEST['_save_and_continue'] ?? false)) {
						//If the CSS files have changed, and we opened up from the front-end,
						//unset the slotName from the key to force the toolkit to reload the whole page.
						if ((isset($fields['this_css_tab/use_css_file']['current_value']) && $fields['this_css_tab/use_css_file']['current_value'] != $fields['this_css_tab/use_css_file']['value'])
						 || (isset($fields['this_css_tab/css_source']['current_value']) && $fields['this_css_tab/css_source']['current_value'] != $fields['this_css_tab/css_source']['value'])
						 || (isset($fields['all_css_tab/use_css_file']['current_value']) && $fields['all_css_tab/use_css_file']['current_value'] != $fields['all_css_tab/use_css_file']['value'])
						 || (isset($fields['all_css_tab/css_source']['current_value']) && $fields['all_css_tab/css_source']['current_value'] != $fields['all_css_tab/css_source']['value'])) {
					
							if ($box['key']['cID'] && $box['key']['cType'] && $box['key']['slotName']) {
								$_SESSION['scroll_slot_on_'. $box['key']['cType']. '_'. $box['key']['cID']] = $box['key']['slotName'];
								unset($box['key']['slotName']);
							}
						}
					}
					
					checkForChangesInCssJsAndHtmlFiles($runInProductionMode = true, $forceScan = true);
				}
				
		
				break;
		}


		//Clear anything that is cached for this instance
		$sql = "
			DELETE
			FROM ". DB_NAME_PREFIX. "plugin_instance_cache
			WHERE method_name NOT IN ('#conductor_positions#')
			  AND instance_id = ". (int) $box['key']['instanceId'];
		sqlQuery($sql);
		
	}
}
